# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, validator

class AuditAttributes(BaseModel):
    """
    The type-specific properties of the audit object returned  # noqa: E501
    """
    user: StrictStr = Field(..., description="The user name associated to this audit log")
    category: StrictStr = Field(..., description="What service is taking/took this audited action")
    action: StrictStr = Field(..., description="What action is being performed")
    direction: StrictStr = Field(..., description="Whether is request is being made into or out of the entity's client")
    status: StrictStr = Field(..., description="State of the audited action")
    cause: StrictStr = Field(..., description="Reason the audited action is in its current state")
    data: StrictStr = Field(..., description="Tertiary data related to the audited action")
    date_started: StrictStr = Field(..., alias="dateStarted", description="When this audited action was started")
    last_active: StrictStr = Field(..., alias="lastActive", description="When this audited action was last active")
    __properties = ["user", "category", "action", "direction", "status", "cause", "data", "dateStarted", "lastActive"]

    @validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('unknown', 'tunnel', 'terminal', 'remoteBrowser'):
            raise ValueError("must be one of enum values ('unknown', 'tunnel', 'terminal', 'remoteBrowser')")
        return value

    @validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('unknown', 'create'):
            raise ValueError("must be one of enum values ('unknown', 'create')")
        return value

    @validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('unknown', 'inbound', 'outbound'):
            raise ValueError("must be one of enum values ('unknown', 'inbound', 'outbound')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('unknown', 'initiated', 'created', 'closed', 'failed'):
            raise ValueError("must be one of enum values ('unknown', 'initiated', 'created', 'closed', 'failed')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuditAttributes:
        """Create an instance of AuditAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuditAttributes:
        """Create an instance of AuditAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AuditAttributes.parse_obj(obj)

        _obj = AuditAttributes.parse_obj({
            "user": obj.get("user"),
            "category": obj.get("category"),
            "action": obj.get("action"),
            "direction": obj.get("direction"),
            "status": obj.get("status"),
            "cause": obj.get("cause"),
            "data": obj.get("data"),
            "date_started": obj.get("dateStarted"),
            "last_active": obj.get("lastActive")
        })
        return _obj


