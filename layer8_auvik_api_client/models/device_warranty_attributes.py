# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class DeviceWarrantyAttributes(BaseModel):
    """
    The type-specific properties of the devices object returned  # noqa: E501
    """
    device_name: StrictStr = Field(..., alias="deviceName", description="Device's name")
    service_coverage_status: StrictStr = Field(..., alias="serviceCoverageStatus", description="Service coverage status")
    service_attachment_status: Optional[StrictStr] = Field(None, alias="serviceAttachmentStatus", description="Service attachment status")
    contract_renewal_availability: Optional[StrictStr] = Field(None, alias="contractRenewalAvailability", description="Contract renewal availability")
    warranty_coverage_status: StrictStr = Field(..., alias="warrantyCoverageStatus", description="Warranty coverage status")
    warranty_expiration_date: StrictStr = Field(..., alias="warrantyExpirationDate", description="Warranty expiration date for this device. Value is what is returned by Cisco device, which is not guaranteed to be a date.")
    recommended_software_version: StrictStr = Field(..., alias="recommendedSoftwareVersion", description="Recommended Devices software version, if known")
    __properties = ["deviceName", "serviceCoverageStatus", "serviceAttachmentStatus", "contractRenewalAvailability", "warrantyCoverageStatus", "warrantyExpirationDate", "recommendedSoftwareVersion"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeviceWarrantyAttributes:
        """Create an instance of DeviceWarrantyAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeviceWarrantyAttributes:
        """Create an instance of DeviceWarrantyAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DeviceWarrantyAttributes.parse_obj(obj)

        _obj = DeviceWarrantyAttributes.parse_obj({
            "device_name": obj.get("deviceName"),
            "service_coverage_status": obj.get("serviceCoverageStatus"),
            "service_attachment_status": obj.get("serviceAttachmentStatus"),
            "contract_renewal_availability": obj.get("contractRenewalAvailability"),
            "warranty_coverage_status": obj.get("warrantyCoverageStatus"),
            "warranty_expiration_date": obj.get("warrantyExpirationDate"),
            "recommended_software_version": obj.get("recommendedSoftwareVersion")
        })
        return _obj


