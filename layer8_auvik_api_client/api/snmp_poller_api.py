# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictFloat, StrictInt, StrictStr

from typing import Optional, Union

from layer8_auvik_api_client.models.device_type_schema import DeviceTypeSchema
from layer8_auvik_api_client.models.snmp_poller_setting_devices_read import SnmpPollerSettingDevicesRead
from layer8_auvik_api_client.models.snmp_poller_setting_single_read import SnmpPollerSettingSingleRead
from layer8_auvik_api_client.models.snmp_poller_settings_read import SnmpPollerSettingsRead

from layer8_auvik_api_client.api_client import ApiClient
from layer8_auvik_api_client.api_response import ApiResponse
from layer8_auvik_api_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SNMPPollerApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def read_multiple_snmp_poller_setting_devices(self, snmp_poller_setting_id : Annotated[StrictStr, Field(..., description="ID of the SNMP Poller Setting that the devices apply to")], tenants : Annotated[StrictStr, Field(..., description="Comma delimited list of tenant IDs to request info from.")], filter_online_status : Annotated[Optional[StrictStr], Field(description="Filter by the device’s online status.")] = None, filter_modified_after : Annotated[Optional[StrictStr], Field(description="Filter by date and time, only returning entities modified after provided value.")] = None, filter_not_seen_since : Annotated[Optional[StrictStr], Field(description="Filter by the last seen online time, returning entities not seen online after the provided value.")] = None, filter_device_type : Annotated[Optional[DeviceTypeSchema], Field(description="Filter by device type.")] = None, filter_make_model : Annotated[Optional[StrictStr], Field(description="Filter by the device’s make and model.")] = None, filter_vendor_name : Annotated[Optional[StrictStr], Field(description="Filter by the device’s vendor/manufacturer.")] = None, page_first : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.")] = None, page_after : Annotated[Optional[StrictStr], Field(description="Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.")] = None, page_last : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.")] = None, **kwargs) -> SnmpPollerSettingDevicesRead:  # noqa: E501
        """Read SNMP Poller Setting's Devices  # noqa: E501

        Use Read SNMP Poller Setting's Devices API to pull the list of devices that apply to a specific SNMP Poller Setting Id.<br> <br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view monitor settings information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_multiple_snmp_poller_setting_devices(snmp_poller_setting_id, tenants, filter_online_status, filter_modified_after, filter_not_seen_since, filter_device_type, filter_make_model, filter_vendor_name, page_first, page_after, page_last, page_before, async_req=True)
        >>> result = thread.get()

        :param snmp_poller_setting_id: ID of the SNMP Poller Setting that the devices apply to (required)
        :type snmp_poller_setting_id: str
        :param tenants: Comma delimited list of tenant IDs to request info from. (required)
        :type tenants: str
        :param filter_online_status: Filter by the device’s online status.
        :type filter_online_status: str
        :param filter_modified_after: Filter by date and time, only returning entities modified after provided value.
        :type filter_modified_after: str
        :param filter_not_seen_since: Filter by the last seen online time, returning entities not seen online after the provided value.
        :type filter_not_seen_since: str
        :param filter_device_type: Filter by device type.
        :type filter_device_type: DeviceTypeSchema
        :param filter_make_model: Filter by the device’s make and model.
        :type filter_make_model: str
        :param filter_vendor_name: Filter by the device’s vendor/manufacturer.
        :type filter_vendor_name: str
        :param page_first: For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.
        :type page_first: float
        :param page_after: Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.
        :type page_after: str
        :param page_last: For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.
        :type page_last: float
        :param page_before: Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.
        :type page_before: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SnmpPollerSettingDevicesRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the read_multiple_snmp_poller_setting_devices_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.read_multiple_snmp_poller_setting_devices_with_http_info(snmp_poller_setting_id, tenants, filter_online_status, filter_modified_after, filter_not_seen_since, filter_device_type, filter_make_model, filter_vendor_name, page_first, page_after, page_last, page_before, **kwargs)  # noqa: E501

    @validate_arguments
    def read_multiple_snmp_poller_setting_devices_with_http_info(self, snmp_poller_setting_id : Annotated[StrictStr, Field(..., description="ID of the SNMP Poller Setting that the devices apply to")], tenants : Annotated[StrictStr, Field(..., description="Comma delimited list of tenant IDs to request info from.")], filter_online_status : Annotated[Optional[StrictStr], Field(description="Filter by the device’s online status.")] = None, filter_modified_after : Annotated[Optional[StrictStr], Field(description="Filter by date and time, only returning entities modified after provided value.")] = None, filter_not_seen_since : Annotated[Optional[StrictStr], Field(description="Filter by the last seen online time, returning entities not seen online after the provided value.")] = None, filter_device_type : Annotated[Optional[DeviceTypeSchema], Field(description="Filter by device type.")] = None, filter_make_model : Annotated[Optional[StrictStr], Field(description="Filter by the device’s make and model.")] = None, filter_vendor_name : Annotated[Optional[StrictStr], Field(description="Filter by the device’s vendor/manufacturer.")] = None, page_first : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.")] = None, page_after : Annotated[Optional[StrictStr], Field(description="Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.")] = None, page_last : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Read SNMP Poller Setting's Devices  # noqa: E501

        Use Read SNMP Poller Setting's Devices API to pull the list of devices that apply to a specific SNMP Poller Setting Id.<br> <br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view monitor settings information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_multiple_snmp_poller_setting_devices_with_http_info(snmp_poller_setting_id, tenants, filter_online_status, filter_modified_after, filter_not_seen_since, filter_device_type, filter_make_model, filter_vendor_name, page_first, page_after, page_last, page_before, async_req=True)
        >>> result = thread.get()

        :param snmp_poller_setting_id: ID of the SNMP Poller Setting that the devices apply to (required)
        :type snmp_poller_setting_id: str
        :param tenants: Comma delimited list of tenant IDs to request info from. (required)
        :type tenants: str
        :param filter_online_status: Filter by the device’s online status.
        :type filter_online_status: str
        :param filter_modified_after: Filter by date and time, only returning entities modified after provided value.
        :type filter_modified_after: str
        :param filter_not_seen_since: Filter by the last seen online time, returning entities not seen online after the provided value.
        :type filter_not_seen_since: str
        :param filter_device_type: Filter by device type.
        :type filter_device_type: DeviceTypeSchema
        :param filter_make_model: Filter by the device’s make and model.
        :type filter_make_model: str
        :param filter_vendor_name: Filter by the device’s vendor/manufacturer.
        :type filter_vendor_name: str
        :param page_first: For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.
        :type page_first: float
        :param page_after: Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.
        :type page_after: str
        :param page_last: For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.
        :type page_last: float
        :param page_before: Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.
        :type page_before: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SnmpPollerSettingDevicesRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'snmp_poller_setting_id',
            'tenants',
            'filter_online_status',
            'filter_modified_after',
            'filter_not_seen_since',
            'filter_device_type',
            'filter_make_model',
            'filter_vendor_name',
            'page_first',
            'page_after',
            'page_last',
            'page_before'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_multiple_snmp_poller_setting_devices" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['snmp_poller_setting_id'] is not None:
            _path_params['snmpPollerSettingId'] = _params['snmp_poller_setting_id']


        # process the query parameters
        _query_params = []
        if _params.get('tenants') is not None:  # noqa: E501
            _query_params.append(('tenants', _params['tenants']))

        if _params.get('filter_online_status') is not None:  # noqa: E501
            _query_params.append(('filter[onlineStatus]', _params['filter_online_status']))

        if _params.get('filter_modified_after') is not None:  # noqa: E501
            _query_params.append(('filter[modifiedAfter]', _params['filter_modified_after']))

        if _params.get('filter_not_seen_since') is not None:  # noqa: E501
            _query_params.append(('filter[notSeenSince]', _params['filter_not_seen_since']))

        if _params.get('filter_device_type') is not None:  # noqa: E501
            _query_params.append(('filter[deviceType]', _params['filter_device_type'].value))

        if _params.get('filter_make_model') is not None:  # noqa: E501
            _query_params.append(('filter[makeModel]', _params['filter_make_model']))

        if _params.get('filter_vendor_name') is not None:  # noqa: E501
            _query_params.append(('filter[vendorName]', _params['filter_vendor_name']))

        if _params.get('page_first') is not None:  # noqa: E501
            _query_params.append(('page[first]', _params['page_first']))

        if _params.get('page_after') is not None:  # noqa: E501
            _query_params.append(('page[after]', _params['page_after']))

        if _params.get('page_last') is not None:  # noqa: E501
            _query_params.append(('page[last]', _params['page_last']))

        if _params.get('page_before') is not None:  # noqa: E501
            _query_params.append(('page[before]', _params['page_before']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "SnmpPollerSettingDevicesRead",
            '400': "BasicError",
            '403': "BasicError",
            '404': "BasicError",
            '500': None,
        }

        return self.api_client.call_api(
            '/settings/snmppoller/{snmpPollerSettingId}/devices', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def read_multiple_snmp_poller_settings(self, tenants : Annotated[StrictStr, Field(..., description="Comma delimited list of tenant IDs to request info from.")], filter_device_id : Annotated[Optional[StrictStr], Field(description="Filter by device ID")] = None, filter_use_as : Annotated[Optional[StrictStr], Field(description="Filter by oid type")] = None, filter_device_type : Annotated[Optional[DeviceTypeSchema], Field(description="Filter by device type.")] = None, filter_make_model : Annotated[Optional[StrictStr], Field(description="Filter by the device’s make and model.")] = None, filter_vendor_name : Annotated[Optional[StrictStr], Field(description="Filter by the device’s vendor/manufacturer.")] = None, filter_oid : Annotated[Optional[StrictStr], Field(description="Filter by OID")] = None, filter_name : Annotated[Optional[StrictStr], Field(description="Filter by the name of the SNMP poller setting")] = None, page_first : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.")] = None, page_after : Annotated[Optional[StrictStr], Field(description="Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.")] = None, page_last : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.")] = None, **kwargs) -> SnmpPollerSettingsRead:  # noqa: E501
        """Read Multiple SNMP Poller Settings  # noqa: E501

        Use the Read Multiple SNMP Poller Settings API to pull the list of SNMP Poller Settings configured in Auvik.<br> <br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view monitor settings information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_multiple_snmp_poller_settings(tenants, filter_device_id, filter_use_as, filter_device_type, filter_make_model, filter_vendor_name, filter_oid, filter_name, page_first, page_after, page_last, page_before, async_req=True)
        >>> result = thread.get()

        :param tenants: Comma delimited list of tenant IDs to request info from. (required)
        :type tenants: str
        :param filter_device_id: Filter by device ID
        :type filter_device_id: str
        :param filter_use_as: Filter by oid type
        :type filter_use_as: str
        :param filter_device_type: Filter by device type.
        :type filter_device_type: DeviceTypeSchema
        :param filter_make_model: Filter by the device’s make and model.
        :type filter_make_model: str
        :param filter_vendor_name: Filter by the device’s vendor/manufacturer.
        :type filter_vendor_name: str
        :param filter_oid: Filter by OID
        :type filter_oid: str
        :param filter_name: Filter by the name of the SNMP poller setting
        :type filter_name: str
        :param page_first: For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.
        :type page_first: float
        :param page_after: Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.
        :type page_after: str
        :param page_last: For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.
        :type page_last: float
        :param page_before: Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.
        :type page_before: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SnmpPollerSettingsRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the read_multiple_snmp_poller_settings_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.read_multiple_snmp_poller_settings_with_http_info(tenants, filter_device_id, filter_use_as, filter_device_type, filter_make_model, filter_vendor_name, filter_oid, filter_name, page_first, page_after, page_last, page_before, **kwargs)  # noqa: E501

    @validate_arguments
    def read_multiple_snmp_poller_settings_with_http_info(self, tenants : Annotated[StrictStr, Field(..., description="Comma delimited list of tenant IDs to request info from.")], filter_device_id : Annotated[Optional[StrictStr], Field(description="Filter by device ID")] = None, filter_use_as : Annotated[Optional[StrictStr], Field(description="Filter by oid type")] = None, filter_device_type : Annotated[Optional[DeviceTypeSchema], Field(description="Filter by device type.")] = None, filter_make_model : Annotated[Optional[StrictStr], Field(description="Filter by the device’s make and model.")] = None, filter_vendor_name : Annotated[Optional[StrictStr], Field(description="Filter by the device’s vendor/manufacturer.")] = None, filter_oid : Annotated[Optional[StrictStr], Field(description="Filter by OID")] = None, filter_name : Annotated[Optional[StrictStr], Field(description="Filter by the name of the SNMP poller setting")] = None, page_first : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.")] = None, page_after : Annotated[Optional[StrictStr], Field(description="Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.")] = None, page_last : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Read Multiple SNMP Poller Settings  # noqa: E501

        Use the Read Multiple SNMP Poller Settings API to pull the list of SNMP Poller Settings configured in Auvik.<br> <br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view monitor settings information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_multiple_snmp_poller_settings_with_http_info(tenants, filter_device_id, filter_use_as, filter_device_type, filter_make_model, filter_vendor_name, filter_oid, filter_name, page_first, page_after, page_last, page_before, async_req=True)
        >>> result = thread.get()

        :param tenants: Comma delimited list of tenant IDs to request info from. (required)
        :type tenants: str
        :param filter_device_id: Filter by device ID
        :type filter_device_id: str
        :param filter_use_as: Filter by oid type
        :type filter_use_as: str
        :param filter_device_type: Filter by device type.
        :type filter_device_type: DeviceTypeSchema
        :param filter_make_model: Filter by the device’s make and model.
        :type filter_make_model: str
        :param filter_vendor_name: Filter by the device’s vendor/manufacturer.
        :type filter_vendor_name: str
        :param filter_oid: Filter by OID
        :type filter_oid: str
        :param filter_name: Filter by the name of the SNMP poller setting
        :type filter_name: str
        :param page_first: For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.
        :type page_first: float
        :param page_after: Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.
        :type page_after: str
        :param page_last: For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.
        :type page_last: float
        :param page_before: Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.
        :type page_before: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SnmpPollerSettingsRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenants',
            'filter_device_id',
            'filter_use_as',
            'filter_device_type',
            'filter_make_model',
            'filter_vendor_name',
            'filter_oid',
            'filter_name',
            'page_first',
            'page_after',
            'page_last',
            'page_before'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_multiple_snmp_poller_settings" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('tenants') is not None:  # noqa: E501
            _query_params.append(('tenants', _params['tenants']))

        if _params.get('filter_device_id') is not None:  # noqa: E501
            _query_params.append(('filter[deviceId]', _params['filter_device_id']))

        if _params.get('filter_use_as') is not None:  # noqa: E501
            _query_params.append(('filter[useAs]', _params['filter_use_as']))

        if _params.get('filter_device_type') is not None:  # noqa: E501
            _query_params.append(('filter[deviceType]', _params['filter_device_type'].value))

        if _params.get('filter_make_model') is not None:  # noqa: E501
            _query_params.append(('filter[makeModel]', _params['filter_make_model']))

        if _params.get('filter_vendor_name') is not None:  # noqa: E501
            _query_params.append(('filter[vendorName]', _params['filter_vendor_name']))

        if _params.get('filter_oid') is not None:  # noqa: E501
            _query_params.append(('filter[oid]', _params['filter_oid']))

        if _params.get('filter_name') is not None:  # noqa: E501
            _query_params.append(('filter[name]', _params['filter_name']))

        if _params.get('page_first') is not None:  # noqa: E501
            _query_params.append(('page[first]', _params['page_first']))

        if _params.get('page_after') is not None:  # noqa: E501
            _query_params.append(('page[after]', _params['page_after']))

        if _params.get('page_last') is not None:  # noqa: E501
            _query_params.append(('page[last]', _params['page_last']))

        if _params.get('page_before') is not None:  # noqa: E501
            _query_params.append(('page[before]', _params['page_before']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "SnmpPollerSettingsRead",
            '400': "BasicError",
            '403': "BasicError",
            '404': "BasicError",
            '500': None,
        }

        return self.api_client.call_api(
            '/settings/snmppoller', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def read_snmp_poller_setting_single(self, snmp_poller_setting_id : Annotated[StrictStr, Field(..., description="ID of the SNMP Poller Setting to retrieve")], **kwargs) -> SnmpPollerSettingSingleRead:  # noqa: E501
        """Read Single SNMP Poller Setting  # noqa: E501

        Use the Read Single SNMP Poller Setting API to pull details of a specific SNMP Poller Setting configured in Auvik.<br> <br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view monitor settings information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_snmp_poller_setting_single(snmp_poller_setting_id, async_req=True)
        >>> result = thread.get()

        :param snmp_poller_setting_id: ID of the SNMP Poller Setting to retrieve (required)
        :type snmp_poller_setting_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SnmpPollerSettingSingleRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the read_snmp_poller_setting_single_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.read_snmp_poller_setting_single_with_http_info(snmp_poller_setting_id, **kwargs)  # noqa: E501

    @validate_arguments
    def read_snmp_poller_setting_single_with_http_info(self, snmp_poller_setting_id : Annotated[StrictStr, Field(..., description="ID of the SNMP Poller Setting to retrieve")], **kwargs) -> ApiResponse:  # noqa: E501
        """Read Single SNMP Poller Setting  # noqa: E501

        Use the Read Single SNMP Poller Setting API to pull details of a specific SNMP Poller Setting configured in Auvik.<br> <br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view monitor settings information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_snmp_poller_setting_single_with_http_info(snmp_poller_setting_id, async_req=True)
        >>> result = thread.get()

        :param snmp_poller_setting_id: ID of the SNMP Poller Setting to retrieve (required)
        :type snmp_poller_setting_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SnmpPollerSettingSingleRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'snmp_poller_setting_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_snmp_poller_setting_single" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['snmp_poller_setting_id'] is not None:
            _path_params['snmpPollerSettingId'] = _params['snmp_poller_setting_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "SnmpPollerSettingSingleRead",
            '400': "BasicError",
            '403': "BasicError",
            '404': "BasicError",
            '500': None,
        }

        return self.api_client.call_api(
            '/settings/snmppoller/{snmpPollerSettingId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
