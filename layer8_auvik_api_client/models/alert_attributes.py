# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator
from layer8_auvik_api_client.models.alert_attributes_external_ticket import AlertAttributesExternalTicket

class AlertAttributes(BaseModel):
    """
    The type-specific properties of the alerts object returned  # noqa: E501
    """
    name: StrictStr = Field(..., description="This alert's name")
    severity: StrictStr = Field(..., description="This severity of the alert message")
    status: StrictStr = Field(..., description="High level description of this alert's status")
    alert_definition_id: Optional[StrictStr] = Field(None, alias="alertDefinitionId", description="Alert Definition ID linked to Alert type")
    specification_id: Optional[StrictStr] = Field(None, alias="specificationId", description="Specification ID linked to Alert type. Use alertDefinitionId instead")
    detected_on: StrictStr = Field(..., alias="detectedOn", description="The date time of the alert's message was detected")
    description: StrictStr = Field(..., description="This description of the alert")
    dismissed: StrictBool = Field(..., description="Whether the alert has been dismissed or not")
    dispatched: StrictBool = Field(..., description="Whether the alert has been dispatched or not")
    external_ticket: conlist(AlertAttributesExternalTicket) = Field(..., alias="externalTicket", description="The external ticket list associated to current alert message")
    __properties = ["name", "severity", "status", "alertDefinitionId", "specificationId", "detectedOn", "description", "dismissed", "dispatched", "externalTicket"]

    @validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('unknown', 'emergency', 'critical', 'warning', 'info'):
            raise ValueError("must be one of enum values ('unknown', 'emergency', 'critical', 'warning', 'info')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('created', 'resolved', 'paused', 'unpaused'):
            raise ValueError("must be one of enum values ('created', 'resolved', 'paused', 'unpaused')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AlertAttributes:
        """Create an instance of AlertAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in external_ticket (list)
        _items = []
        if self.external_ticket:
            for _item in self.external_ticket:
                if _item:
                    _items.append(_item.to_dict())
            _dict['externalTicket'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AlertAttributes:
        """Create an instance of AlertAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AlertAttributes.parse_obj(obj)

        _obj = AlertAttributes.parse_obj({
            "name": obj.get("name"),
            "severity": obj.get("severity"),
            "status": obj.get("status"),
            "alert_definition_id": obj.get("alertDefinitionId"),
            "specification_id": obj.get("specificationId"),
            "detected_on": obj.get("detectedOn"),
            "description": obj.get("description"),
            "dismissed": obj.get("dismissed"),
            "dispatched": obj.get("dispatched"),
            "external_ticket": [AlertAttributesExternalTicket.from_dict(_item) for _item in obj.get("externalTicket")] if obj.get("externalTicket") is not None else None
        })
        return _obj


