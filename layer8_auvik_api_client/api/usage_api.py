# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr, constr, validator

from typing import Optional

from layer8_auvik_api_client.models.client_usage_read import ClientUsageRead
from layer8_auvik_api_client.models.device_usage_read import DeviceUsageRead

from layer8_auvik_api_client.api_client import ApiClient
from layer8_auvik_api_client.api_response import ApiResponse
from layer8_auvik_api_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class UsageApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def read_client_usage(self, filter_from_date : Annotated[constr(strict=True), Field(..., description="Date from which you want to query")], filter_thru_date : Annotated[constr(strict=True), Field(..., description="Date to which you want to query")], tenants : Annotated[Optional[StrictStr], Field(description="Comma delimited list of tenant IDs to request info from.")] = None, **kwargs) -> ClientUsageRead:  # noqa: E501
        """Read Client Usage  # noqa: E501

        Use the Read Client Usage API to pull a summary of a client’s (and client’s children if a multi-client) usage for a given time range.<br> <br> To find the client IDs, run the <a href=\"#operation/readMultipleTenants\">Read Multiple Tenants API.</a><br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view billing information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>2019-06-01</i> should be the date from which you want to query.</li>     <li><i>2019-06-30</i> should be the date to which you want to query.</li>     <li><i>199762235015168516</i> should be the IDs of list of IDs of the clients whose data you wish to query.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_client_usage(filter_from_date, filter_thru_date, tenants, async_req=True)
        >>> result = thread.get()

        :param filter_from_date: Date from which you want to query (required)
        :type filter_from_date: str
        :param filter_thru_date: Date to which you want to query (required)
        :type filter_thru_date: str
        :param tenants: Comma delimited list of tenant IDs to request info from.
        :type tenants: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ClientUsageRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the read_client_usage_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.read_client_usage_with_http_info(filter_from_date, filter_thru_date, tenants, **kwargs)  # noqa: E501

    @validate_arguments
    def read_client_usage_with_http_info(self, filter_from_date : Annotated[constr(strict=True), Field(..., description="Date from which you want to query")], filter_thru_date : Annotated[constr(strict=True), Field(..., description="Date to which you want to query")], tenants : Annotated[Optional[StrictStr], Field(description="Comma delimited list of tenant IDs to request info from.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Read Client Usage  # noqa: E501

        Use the Read Client Usage API to pull a summary of a client’s (and client’s children if a multi-client) usage for a given time range.<br> <br> To find the client IDs, run the <a href=\"#operation/readMultipleTenants\">Read Multiple Tenants API.</a><br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view billing information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>2019-06-01</i> should be the date from which you want to query.</li>     <li><i>2019-06-30</i> should be the date to which you want to query.</li>     <li><i>199762235015168516</i> should be the IDs of list of IDs of the clients whose data you wish to query.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_client_usage_with_http_info(filter_from_date, filter_thru_date, tenants, async_req=True)
        >>> result = thread.get()

        :param filter_from_date: Date from which you want to query (required)
        :type filter_from_date: str
        :param filter_thru_date: Date to which you want to query (required)
        :type filter_thru_date: str
        :param tenants: Comma delimited list of tenant IDs to request info from.
        :type tenants: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ClientUsageRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'filter_from_date',
            'filter_thru_date',
            'tenants'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_client_usage" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('filter_from_date') is not None:  # noqa: E501
            _query_params.append(('filter[fromDate]', _params['filter_from_date']))

        if _params.get('filter_thru_date') is not None:  # noqa: E501
            _query_params.append(('filter[thruDate]', _params['filter_thru_date']))

        if _params.get('tenants') is not None:  # noqa: E501
            _query_params.append(('tenants', _params['tenants']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "ClientUsageRead",
            '400': "BasicError",
            '403': "BasicError",
            '404': "BasicError",
            '500': None,
        }

        return self.api_client.call_api(
            '/billing/usage/client', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def read_device_usage(self, id : Annotated[StrictStr, Field(..., description="ID of device")], filter_from_date : Annotated[constr(strict=True), Field(..., description="Date from which you want to query")], filter_thru_date : Annotated[constr(strict=True), Field(..., description="Date to which you want to query")], **kwargs) -> DeviceUsageRead:  # noqa: E501
        """Read Device Usage  # noqa: E501

        Use the Read Device Usage API to pull a summary of a client’s (and client’s children if a multi-client) usage for a given time range.<br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view billing information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>2019-06-01</i> should be the date from which you want to query.</li>     <li><i>2019-06-30</i> should be the date to which you want to query.</li>     <li><i>MTk5...g2Nw</i> should be the ID of the device whose usage you want to query.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_device_usage(id, filter_from_date, filter_thru_date, async_req=True)
        >>> result = thread.get()

        :param id: ID of device (required)
        :type id: str
        :param filter_from_date: Date from which you want to query (required)
        :type filter_from_date: str
        :param filter_thru_date: Date to which you want to query (required)
        :type filter_thru_date: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DeviceUsageRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the read_device_usage_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.read_device_usage_with_http_info(id, filter_from_date, filter_thru_date, **kwargs)  # noqa: E501

    @validate_arguments
    def read_device_usage_with_http_info(self, id : Annotated[StrictStr, Field(..., description="ID of device")], filter_from_date : Annotated[constr(strict=True), Field(..., description="Date from which you want to query")], filter_thru_date : Annotated[constr(strict=True), Field(..., description="Date to which you want to query")], **kwargs) -> ApiResponse:  # noqa: E501
        """Read Device Usage  # noqa: E501

        Use the Read Device Usage API to pull a summary of a client’s (and client’s children if a multi-client) usage for a given time range.<br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view billing information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>2019-06-01</i> should be the date from which you want to query.</li>     <li><i>2019-06-30</i> should be the date to which you want to query.</li>     <li><i>MTk5...g2Nw</i> should be the ID of the device whose usage you want to query.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_device_usage_with_http_info(id, filter_from_date, filter_thru_date, async_req=True)
        >>> result = thread.get()

        :param id: ID of device (required)
        :type id: str
        :param filter_from_date: Date from which you want to query (required)
        :type filter_from_date: str
        :param filter_thru_date: Date to which you want to query (required)
        :type filter_thru_date: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DeviceUsageRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'filter_from_date',
            'filter_thru_date'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_device_usage" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('filter_from_date') is not None:  # noqa: E501
            _query_params.append(('filter[fromDate]', _params['filter_from_date']))

        if _params.get('filter_thru_date') is not None:  # noqa: E501
            _query_params.append(('filter[thruDate]', _params['filter_thru_date']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "DeviceUsageRead",
            '400': "BasicError",
            '403': "BasicError",
            '404': "BasicError",
            '500': None,
        }

        return self.api_client.call_api(
            '/billing/usage/device/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
