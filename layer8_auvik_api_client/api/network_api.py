# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictFloat, StrictInt, StrictStr

from typing import Optional, Union

from layer8_auvik_api_client.models.network_details_read_multiple import NetworkDetailsReadMultiple
from layer8_auvik_api_client.models.network_details_read_single import NetworkDetailsReadSingle
from layer8_auvik_api_client.models.network_info_read_multiple import NetworkInfoReadMultiple
from layer8_auvik_api_client.models.network_info_read_single import NetworkInfoReadSingle

from layer8_auvik_api_client.api_client import ApiClient
from layer8_auvik_api_client.api_response import ApiResponse
from layer8_auvik_api_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class NetworkApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def read_multiple_network_details(self, filter_network_type : Annotated[Optional[StrictStr], Field(description="Filter by network type.")] = None, filter_scan_status : Annotated[Optional[StrictStr], Field(description="Filter by the network’s scan status.")] = None, filter_devices : Annotated[Optional[StrictStr], Field(description="Filter by IDs of devices on this network. Filter by multiple values by providing a comma delimited list.")] = None, filter_modified_after : Annotated[Optional[StrictStr], Field(description="Filter by date and time, only returning entities modified after provided value.")] = None, filter_scope : Annotated[Optional[StrictStr], Field(description="Filter by the network’s scope")] = None, tenants : Annotated[Optional[StrictStr], Field(description="Comma delimited list of tenant IDs to request info from.")] = None, page_first : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.")] = None, page_after : Annotated[Optional[StrictStr], Field(description="Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.")] = None, page_last : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.")] = None, **kwargs) -> NetworkDetailsReadMultiple:  # noqa: E501
        """Read Multiple Networks’ Details  # noqa: E501

        Use the Read Multiple Networks’ Details API to pull extra collected information about the various networks Auvik has discovered not already included in the Network Info API. You’ll need the client IDs for the clients you want to run the multiple read against.<br> <br> To find the client IDs, run the <a href=\"#operation/readMultipleTenants\">Read Multiple Tenants API.</a><br> <br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li>Within the API URL, <b>us1.my</b> (https://auvikapi.us1.my.auvik.com) should be updated to match the region in which your account resides. To locate the region, log into your Auvik dashboard and look at the URL in your browser’s address bar.</li>     <li><i>user@example.com</i> should be the email address of a user with permissions to view network details.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>195798545063742726</i> should be the ID or comma delimited IDs of the client(s) whose data you wish to fetch information from. </li>     <li><i>filter[networkType]=routed</i> should be whichever key and value pair you want to filter the result set by. See below for a list of filterable parameters.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_multiple_network_details(filter_network_type, filter_scan_status, filter_devices, filter_modified_after, filter_scope, tenants, page_first, page_after, page_last, page_before, async_req=True)
        >>> result = thread.get()

        :param filter_network_type: Filter by network type.
        :type filter_network_type: str
        :param filter_scan_status: Filter by the network’s scan status.
        :type filter_scan_status: str
        :param filter_devices: Filter by IDs of devices on this network. Filter by multiple values by providing a comma delimited list.
        :type filter_devices: str
        :param filter_modified_after: Filter by date and time, only returning entities modified after provided value.
        :type filter_modified_after: str
        :param filter_scope: Filter by the network’s scope
        :type filter_scope: str
        :param tenants: Comma delimited list of tenant IDs to request info from.
        :type tenants: str
        :param page_first: For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.
        :type page_first: float
        :param page_after: Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.
        :type page_after: str
        :param page_last: For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.
        :type page_last: float
        :param page_before: Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.
        :type page_before: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: NetworkDetailsReadMultiple
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the read_multiple_network_details_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.read_multiple_network_details_with_http_info(filter_network_type, filter_scan_status, filter_devices, filter_modified_after, filter_scope, tenants, page_first, page_after, page_last, page_before, **kwargs)  # noqa: E501

    @validate_arguments
    def read_multiple_network_details_with_http_info(self, filter_network_type : Annotated[Optional[StrictStr], Field(description="Filter by network type.")] = None, filter_scan_status : Annotated[Optional[StrictStr], Field(description="Filter by the network’s scan status.")] = None, filter_devices : Annotated[Optional[StrictStr], Field(description="Filter by IDs of devices on this network. Filter by multiple values by providing a comma delimited list.")] = None, filter_modified_after : Annotated[Optional[StrictStr], Field(description="Filter by date and time, only returning entities modified after provided value.")] = None, filter_scope : Annotated[Optional[StrictStr], Field(description="Filter by the network’s scope")] = None, tenants : Annotated[Optional[StrictStr], Field(description="Comma delimited list of tenant IDs to request info from.")] = None, page_first : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.")] = None, page_after : Annotated[Optional[StrictStr], Field(description="Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.")] = None, page_last : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Read Multiple Networks’ Details  # noqa: E501

        Use the Read Multiple Networks’ Details API to pull extra collected information about the various networks Auvik has discovered not already included in the Network Info API. You’ll need the client IDs for the clients you want to run the multiple read against.<br> <br> To find the client IDs, run the <a href=\"#operation/readMultipleTenants\">Read Multiple Tenants API.</a><br> <br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li>Within the API URL, <b>us1.my</b> (https://auvikapi.us1.my.auvik.com) should be updated to match the region in which your account resides. To locate the region, log into your Auvik dashboard and look at the URL in your browser’s address bar.</li>     <li><i>user@example.com</i> should be the email address of a user with permissions to view network details.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>195798545063742726</i> should be the ID or comma delimited IDs of the client(s) whose data you wish to fetch information from. </li>     <li><i>filter[networkType]=routed</i> should be whichever key and value pair you want to filter the result set by. See below for a list of filterable parameters.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_multiple_network_details_with_http_info(filter_network_type, filter_scan_status, filter_devices, filter_modified_after, filter_scope, tenants, page_first, page_after, page_last, page_before, async_req=True)
        >>> result = thread.get()

        :param filter_network_type: Filter by network type.
        :type filter_network_type: str
        :param filter_scan_status: Filter by the network’s scan status.
        :type filter_scan_status: str
        :param filter_devices: Filter by IDs of devices on this network. Filter by multiple values by providing a comma delimited list.
        :type filter_devices: str
        :param filter_modified_after: Filter by date and time, only returning entities modified after provided value.
        :type filter_modified_after: str
        :param filter_scope: Filter by the network’s scope
        :type filter_scope: str
        :param tenants: Comma delimited list of tenant IDs to request info from.
        :type tenants: str
        :param page_first: For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.
        :type page_first: float
        :param page_after: Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.
        :type page_after: str
        :param page_last: For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.
        :type page_last: float
        :param page_before: Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.
        :type page_before: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(NetworkDetailsReadMultiple, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'filter_network_type',
            'filter_scan_status',
            'filter_devices',
            'filter_modified_after',
            'filter_scope',
            'tenants',
            'page_first',
            'page_after',
            'page_last',
            'page_before'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_multiple_network_details" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('filter_network_type') is not None:  # noqa: E501
            _query_params.append(('filter[networkType]', _params['filter_network_type']))

        if _params.get('filter_scan_status') is not None:  # noqa: E501
            _query_params.append(('filter[scanStatus]', _params['filter_scan_status']))

        if _params.get('filter_devices') is not None:  # noqa: E501
            _query_params.append(('filter[devices]', _params['filter_devices']))

        if _params.get('filter_modified_after') is not None:  # noqa: E501
            _query_params.append(('filter[modifiedAfter]', _params['filter_modified_after']))

        if _params.get('filter_scope') is not None:  # noqa: E501
            _query_params.append(('filter[scope]', _params['filter_scope']))

        if _params.get('tenants') is not None:  # noqa: E501
            _query_params.append(('tenants', _params['tenants']))

        if _params.get('page_first') is not None:  # noqa: E501
            _query_params.append(('page[first]', _params['page_first']))

        if _params.get('page_after') is not None:  # noqa: E501
            _query_params.append(('page[after]', _params['page_after']))

        if _params.get('page_last') is not None:  # noqa: E501
            _query_params.append(('page[last]', _params['page_last']))

        if _params.get('page_before') is not None:  # noqa: E501
            _query_params.append(('page[before]', _params['page_before']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "NetworkDetailsReadMultiple",
            '400': "BasicError",
            '403': "BasicError",
            '404': "BasicError",
            '500': None,
        }

        return self.api_client.call_api(
            '/inventory/network/detail', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def read_multiple_network_info(self, filter_network_type : Annotated[Optional[StrictStr], Field(description="Filter by network type.")] = None, filter_scan_status : Annotated[Optional[StrictStr], Field(description="Filter by the network’s scan status.")] = None, filter_devices : Annotated[Optional[StrictStr], Field(description="Filter by IDs of devices on this network. Filter by multiple values by providing a comma delimited list.")] = None, filter_modified_after : Annotated[Optional[StrictStr], Field(description="Filter by date and time, only returning entities modified after provided value.")] = None, tenants : Annotated[Optional[StrictStr], Field(description="Comma delimited list of tenant IDs to request info from.")] = None, page_first : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.")] = None, page_after : Annotated[Optional[StrictStr], Field(description="Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.")] = None, page_last : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.")] = None, include : Annotated[Optional[StrictStr], Field(description="Use to include the full resource objects of any of the network’s relationships.")] = None, fields_network_detail : Annotated[Optional[StrictStr], Field(description="Use to limit the attributes that will be returned in the included detail object to only what is specified by this query parameter. Requires <code>include=networkDetail</code>")] = None, **kwargs) -> NetworkInfoReadMultiple:  # noqa: E501
        """Read Multiple Networks’ Info  # noqa: E501

        Use the Read Multiple Networks’ Info API to pull the collected information about the various networks Auvik has discovered. You’ll need the client IDs for the clients you want to run the multiple read against.<br> <br> To find the client IDs, run the <a href=\"#operation/readMultipleTenants\">Read Multiple Tenants API.</a><br> <br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li>Within the API URL, <b>us1.my</b> (https://auvikapi.us1.my.auvik.com) should be updated to match the region in which your account resides. To locate the region, log into your Auvik dashboard and look at the URL in your browser’s address bar.</li>     <li><i>user@example.com</i> should be the email address of a user with permissions to view network information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>195798545063742726</i> should be the ID or comma delimited IDs of the client(s) whose data you wish to fetch information from. </li>     <li><i>filter[networkType]=routed</i> should be whichever key and value pair you want to filter the result set by. See below for a list of filterable parameters.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_multiple_network_info(filter_network_type, filter_scan_status, filter_devices, filter_modified_after, tenants, page_first, page_after, page_last, page_before, include, fields_network_detail, async_req=True)
        >>> result = thread.get()

        :param filter_network_type: Filter by network type.
        :type filter_network_type: str
        :param filter_scan_status: Filter by the network’s scan status.
        :type filter_scan_status: str
        :param filter_devices: Filter by IDs of devices on this network. Filter by multiple values by providing a comma delimited list.
        :type filter_devices: str
        :param filter_modified_after: Filter by date and time, only returning entities modified after provided value.
        :type filter_modified_after: str
        :param tenants: Comma delimited list of tenant IDs to request info from.
        :type tenants: str
        :param page_first: For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.
        :type page_first: float
        :param page_after: Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.
        :type page_after: str
        :param page_last: For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.
        :type page_last: float
        :param page_before: Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.
        :type page_before: str
        :param include: Use to include the full resource objects of any of the network’s relationships.
        :type include: str
        :param fields_network_detail: Use to limit the attributes that will be returned in the included detail object to only what is specified by this query parameter. Requires <code>include=networkDetail</code>
        :type fields_network_detail: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: NetworkInfoReadMultiple
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the read_multiple_network_info_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.read_multiple_network_info_with_http_info(filter_network_type, filter_scan_status, filter_devices, filter_modified_after, tenants, page_first, page_after, page_last, page_before, include, fields_network_detail, **kwargs)  # noqa: E501

    @validate_arguments
    def read_multiple_network_info_with_http_info(self, filter_network_type : Annotated[Optional[StrictStr], Field(description="Filter by network type.")] = None, filter_scan_status : Annotated[Optional[StrictStr], Field(description="Filter by the network’s scan status.")] = None, filter_devices : Annotated[Optional[StrictStr], Field(description="Filter by IDs of devices on this network. Filter by multiple values by providing a comma delimited list.")] = None, filter_modified_after : Annotated[Optional[StrictStr], Field(description="Filter by date and time, only returning entities modified after provided value.")] = None, tenants : Annotated[Optional[StrictStr], Field(description="Comma delimited list of tenant IDs to request info from.")] = None, page_first : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.")] = None, page_after : Annotated[Optional[StrictStr], Field(description="Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.")] = None, page_last : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.")] = None, include : Annotated[Optional[StrictStr], Field(description="Use to include the full resource objects of any of the network’s relationships.")] = None, fields_network_detail : Annotated[Optional[StrictStr], Field(description="Use to limit the attributes that will be returned in the included detail object to only what is specified by this query parameter. Requires <code>include=networkDetail</code>")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Read Multiple Networks’ Info  # noqa: E501

        Use the Read Multiple Networks’ Info API to pull the collected information about the various networks Auvik has discovered. You’ll need the client IDs for the clients you want to run the multiple read against.<br> <br> To find the client IDs, run the <a href=\"#operation/readMultipleTenants\">Read Multiple Tenants API.</a><br> <br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li>Within the API URL, <b>us1.my</b> (https://auvikapi.us1.my.auvik.com) should be updated to match the region in which your account resides. To locate the region, log into your Auvik dashboard and look at the URL in your browser’s address bar.</li>     <li><i>user@example.com</i> should be the email address of a user with permissions to view network information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>195798545063742726</i> should be the ID or comma delimited IDs of the client(s) whose data you wish to fetch information from. </li>     <li><i>filter[networkType]=routed</i> should be whichever key and value pair you want to filter the result set by. See below for a list of filterable parameters.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_multiple_network_info_with_http_info(filter_network_type, filter_scan_status, filter_devices, filter_modified_after, tenants, page_first, page_after, page_last, page_before, include, fields_network_detail, async_req=True)
        >>> result = thread.get()

        :param filter_network_type: Filter by network type.
        :type filter_network_type: str
        :param filter_scan_status: Filter by the network’s scan status.
        :type filter_scan_status: str
        :param filter_devices: Filter by IDs of devices on this network. Filter by multiple values by providing a comma delimited list.
        :type filter_devices: str
        :param filter_modified_after: Filter by date and time, only returning entities modified after provided value.
        :type filter_modified_after: str
        :param tenants: Comma delimited list of tenant IDs to request info from.
        :type tenants: str
        :param page_first: For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.
        :type page_first: float
        :param page_after: Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.
        :type page_after: str
        :param page_last: For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.
        :type page_last: float
        :param page_before: Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.
        :type page_before: str
        :param include: Use to include the full resource objects of any of the network’s relationships.
        :type include: str
        :param fields_network_detail: Use to limit the attributes that will be returned in the included detail object to only what is specified by this query parameter. Requires <code>include=networkDetail</code>
        :type fields_network_detail: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(NetworkInfoReadMultiple, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'filter_network_type',
            'filter_scan_status',
            'filter_devices',
            'filter_modified_after',
            'tenants',
            'page_first',
            'page_after',
            'page_last',
            'page_before',
            'include',
            'fields_network_detail'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_multiple_network_info" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('filter_network_type') is not None:  # noqa: E501
            _query_params.append(('filter[networkType]', _params['filter_network_type']))

        if _params.get('filter_scan_status') is not None:  # noqa: E501
            _query_params.append(('filter[scanStatus]', _params['filter_scan_status']))

        if _params.get('filter_devices') is not None:  # noqa: E501
            _query_params.append(('filter[devices]', _params['filter_devices']))

        if _params.get('filter_modified_after') is not None:  # noqa: E501
            _query_params.append(('filter[modifiedAfter]', _params['filter_modified_after']))

        if _params.get('tenants') is not None:  # noqa: E501
            _query_params.append(('tenants', _params['tenants']))

        if _params.get('page_first') is not None:  # noqa: E501
            _query_params.append(('page[first]', _params['page_first']))

        if _params.get('page_after') is not None:  # noqa: E501
            _query_params.append(('page[after]', _params['page_after']))

        if _params.get('page_last') is not None:  # noqa: E501
            _query_params.append(('page[last]', _params['page_last']))

        if _params.get('page_before') is not None:  # noqa: E501
            _query_params.append(('page[before]', _params['page_before']))

        if _params.get('include') is not None:  # noqa: E501
            _query_params.append(('include', _params['include']))

        if _params.get('fields_network_detail') is not None:  # noqa: E501
            _query_params.append(('fields[networkDetail]', _params['fields_network_detail']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "NetworkInfoReadMultiple",
            '400': "BasicError",
            '403': "BasicError",
            '404': "BasicError",
            '500': None,
        }

        return self.api_client.call_api(
            '/inventory/network/info', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def read_single_network_details(self, id : Annotated[StrictStr, Field(..., description="ID of network")], **kwargs) -> NetworkDetailsReadSingle:  # noqa: E501
        """Read a Single Network’s Details  # noqa: E501

        Use the Read Single Networks’s Details API to pull extra collected information about a specific network Auvik has discovered not already included in the network Info API. You’ll need the network ID for the specific network.<br> <br> To find the network IDs, run the <a href=\"#operations/readMultipleNetworkInfo\">Read Multiple Networks API</a>.<br> <br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li>Within the API URL, <b>us1.my</b> (https://auvikapi.us1.my.auvik.com) should be updated to match the region in which your account resides. To locate the region, log into your Auvik dashboard and look at the URL in your browser’s address bar.</li>     <li><i>user@example.com</i> should be the email address of a user with permissions to view network details.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>MTk...yMw</i> should be the network’s ID.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_single_network_details(id, async_req=True)
        >>> result = thread.get()

        :param id: ID of network (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: NetworkDetailsReadSingle
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the read_single_network_details_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.read_single_network_details_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def read_single_network_details_with_http_info(self, id : Annotated[StrictStr, Field(..., description="ID of network")], **kwargs) -> ApiResponse:  # noqa: E501
        """Read a Single Network’s Details  # noqa: E501

        Use the Read Single Networks’s Details API to pull extra collected information about a specific network Auvik has discovered not already included in the network Info API. You’ll need the network ID for the specific network.<br> <br> To find the network IDs, run the <a href=\"#operations/readMultipleNetworkInfo\">Read Multiple Networks API</a>.<br> <br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li>Within the API URL, <b>us1.my</b> (https://auvikapi.us1.my.auvik.com) should be updated to match the region in which your account resides. To locate the region, log into your Auvik dashboard and look at the URL in your browser’s address bar.</li>     <li><i>user@example.com</i> should be the email address of a user with permissions to view network details.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>MTk...yMw</i> should be the network’s ID.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_single_network_details_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: ID of network (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(NetworkDetailsReadSingle, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_single_network_details" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "NetworkDetailsReadSingle",
            '400': "BasicError",
            '403': "BasicError",
            '404': "BasicError",
            '500': None,
        }

        return self.api_client.call_api(
            '/inventory/network/detail/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def read_single_network_info(self, id : Annotated[StrictStr, Field(..., description="ID of network")], include : Annotated[Optional[StrictStr], Field(description="Use to include the full resource objects of any of the network’s relationships.")] = None, fields_network_detail : Annotated[Optional[StrictStr], Field(description="Use to limit the attributes that will be returned in the included detail object to only what is specified by this query parameter. Requires <code>include=networkDetail</code>")] = None, **kwargs) -> NetworkInfoReadSingle:  # noqa: E501
        """Read a Single Network’s Info  # noqa: E501

        Use the Read Single Network’s Info API to pull the collected information about a specific network Auvik has discovered. You’ll need the network ID for the specific network.<br> <br> To find the network IDs, run the <a href=\"#operations/readMultipleNetworkInfo\">Read Multiple Networks’ Info API</a>.<br> <br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li>Within the API URL, <b>us1.my</b> (https://auvikapi.us1.my.auvik.com) should be updated to match the region in which your account resides. To locate the region, log into your Auvik dashboard and look at the URL in your browser’s address bar.</li>     <li><i>user@example.com</i> should be the email address of a user with permissions to view network information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>MTk...yMw</i> should be the network ID.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_single_network_info(id, include, fields_network_detail, async_req=True)
        >>> result = thread.get()

        :param id: ID of network (required)
        :type id: str
        :param include: Use to include the full resource objects of any of the network’s relationships.
        :type include: str
        :param fields_network_detail: Use to limit the attributes that will be returned in the included detail object to only what is specified by this query parameter. Requires <code>include=networkDetail</code>
        :type fields_network_detail: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: NetworkInfoReadSingle
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the read_single_network_info_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.read_single_network_info_with_http_info(id, include, fields_network_detail, **kwargs)  # noqa: E501

    @validate_arguments
    def read_single_network_info_with_http_info(self, id : Annotated[StrictStr, Field(..., description="ID of network")], include : Annotated[Optional[StrictStr], Field(description="Use to include the full resource objects of any of the network’s relationships.")] = None, fields_network_detail : Annotated[Optional[StrictStr], Field(description="Use to limit the attributes that will be returned in the included detail object to only what is specified by this query parameter. Requires <code>include=networkDetail</code>")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Read a Single Network’s Info  # noqa: E501

        Use the Read Single Network’s Info API to pull the collected information about a specific network Auvik has discovered. You’ll need the network ID for the specific network.<br> <br> To find the network IDs, run the <a href=\"#operations/readMultipleNetworkInfo\">Read Multiple Networks’ Info API</a>.<br> <br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li>Within the API URL, <b>us1.my</b> (https://auvikapi.us1.my.auvik.com) should be updated to match the region in which your account resides. To locate the region, log into your Auvik dashboard and look at the URL in your browser’s address bar.</li>     <li><i>user@example.com</i> should be the email address of a user with permissions to view network information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>MTk...yMw</i> should be the network ID.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_single_network_info_with_http_info(id, include, fields_network_detail, async_req=True)
        >>> result = thread.get()

        :param id: ID of network (required)
        :type id: str
        :param include: Use to include the full resource objects of any of the network’s relationships.
        :type include: str
        :param fields_network_detail: Use to limit the attributes that will be returned in the included detail object to only what is specified by this query parameter. Requires <code>include=networkDetail</code>
        :type fields_network_detail: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(NetworkInfoReadSingle, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'include',
            'fields_network_detail'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_single_network_info" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('include') is not None:  # noqa: E501
            _query_params.append(('include', _params['include']))

        if _params.get('fields_network_detail') is not None:  # noqa: E501
            _query_params.append(('fields[networkDetail]', _params['fields_network_detail']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "NetworkInfoReadSingle",
            '400': "BasicError",
            '403': "BasicError",
            '404': "BasicError",
            '500': None,
        }

        return self.api_client.call_api(
            '/inventory/network/info/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
