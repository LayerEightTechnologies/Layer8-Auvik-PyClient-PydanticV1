# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import json
import pprint
import re  # noqa: F401
from aenum import Enum, no_arg





class DeviceTypeSchema(str, Enum):
    """
    DeviceTypeSchema
    """

    """
    allowed enum values
    """
    UNKNOWN = 'unknown'
    SWITCH = 'switch'
    L3SWITCH = 'l3Switch'
    ROUTER = 'router'
    ACCESSPOINT = 'accessPoint'
    FIREWALL = 'firewall'
    WORKSTATION = 'workstation'
    SERVER = 'server'
    STORAGE = 'storage'
    PRINTER = 'printer'
    COPIER = 'copier'
    HYPERVISOR = 'hypervisor'
    MULTIMEDIA = 'multimedia'
    PHONE = 'phone'
    TABLET = 'tablet'
    HANDHELD = 'handheld'
    VIRTUALAPPLIANCE = 'virtualAppliance'
    BRIDGE = 'bridge'
    CONTROLLER = 'controller'
    HUB = 'hub'
    MODEM = 'modem'
    UPS = 'ups'
    MODULE = 'module'
    LOADBALANCER = 'loadBalancer'
    CAMERA = 'camera'
    TELECOMMUNICATIONS = 'telecommunications'
    PACKETPROCESSOR = 'packetProcessor'
    CHASSIS = 'chassis'
    AIRCONDITIONER = 'airConditioner'
    VIRTUALMACHINE = 'virtualMachine'
    PDU = 'pdu'
    IPPHONE = 'ipPhone'
    BACKHAUL = 'backhaul'
    INTERNETOFTHINGS = 'internetOfThings'
    VOIPSWITCH = 'voipSwitch'
    STACK = 'stack'
    BACKUPDEVICE = 'backupDevice'
    TIMECLOCK = 'timeClock'
    LIGHTINGDEVICE = 'lightingDevice'
    AUDIOVISUAL = 'audioVisual'
    SECURITYAPPLIANCE = 'securityAppliance'
    UTM = 'utm'
    ALARM = 'alarm'
    BUILDINGMANAGEMENT = 'buildingManagement'
    IPMI = 'ipmi'
    THINACCESSPOINT = 'thinAccessPoint'
    THINCLIENT = 'thinClient'

    @classmethod
    def from_json(cls, json_str: str) -> DeviceTypeSchema:
        """Create an instance of DeviceTypeSchema from a JSON string"""
        return DeviceTypeSchema(json.loads(json_str))


