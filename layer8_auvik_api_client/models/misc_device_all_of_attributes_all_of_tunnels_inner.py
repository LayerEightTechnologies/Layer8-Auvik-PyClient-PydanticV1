# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr

class MiscDeviceAllOfAttributesAllOfTunnelsInner(BaseModel):
    """
    MiscDeviceAllOfAttributesAllOfTunnelsInner
    """
    name_phase1: StrictStr = Field(..., alias="namePhase1", description="The defining name of the first phase within Internet Key Exchange (IKE) tunnel negotiation")
    name_phase2: StrictStr = Field(..., alias="namePhase2", description="The defining name of the second phase within Internet Key Exchange (IKE) tunnel negotiation")
    local_gateway: StrictStr = Field(..., alias="localGateway", description="IP address of the local IKE gateway")
    remote_gateway: StrictStr = Field(..., alias="remoteGateway", description="IP address of the remote IKE gateway")
    source_begin_ip: StrictStr = Field(..., alias="sourceBeginIP", description="The first IP address within the range of addresses assigned to IPSec tunnel interfaces on the local device")
    source_end_ip: StrictStr = Field(..., alias="sourceEndIP", description="The last IP address within the range of addresses assigned to IPSec tunnel interfaces on the local device")
    destination_begin_ip: StrictStr = Field(..., alias="destinationBeginIP", description="The first IP address within the range of addresses assigned to IPSec tunnel interfaces on the remote device")
    destination_end_ip: StrictStr = Field(..., alias="destinationEndIP", description="The last IP address within the range of addresses assigned to IPSec tunnel interfaces on the remote device")
    __properties = ["namePhase1", "namePhase2", "localGateway", "remoteGateway", "sourceBeginIP", "sourceEndIP", "destinationBeginIP", "destinationEndIP"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MiscDeviceAllOfAttributesAllOfTunnelsInner:
        """Create an instance of MiscDeviceAllOfAttributesAllOfTunnelsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MiscDeviceAllOfAttributesAllOfTunnelsInner:
        """Create an instance of MiscDeviceAllOfAttributesAllOfTunnelsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MiscDeviceAllOfAttributesAllOfTunnelsInner.parse_obj(obj)

        _obj = MiscDeviceAllOfAttributesAllOfTunnelsInner.parse_obj({
            "name_phase1": obj.get("namePhase1"),
            "name_phase2": obj.get("namePhase2"),
            "local_gateway": obj.get("localGateway"),
            "remote_gateway": obj.get("remoteGateway"),
            "source_begin_ip": obj.get("sourceBeginIP"),
            "source_end_ip": obj.get("sourceEndIP"),
            "destination_begin_ip": obj.get("destinationBeginIP"),
            "destination_end_ip": obj.get("destinationEndIP")
        })
        return _obj


