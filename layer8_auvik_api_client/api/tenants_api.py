# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictStr

from typing import Optional

from layer8_auvik_api_client.models.tenants_detail_read_multiple import TenantsDetailReadMultiple
from layer8_auvik_api_client.models.tenants_detail_read_single import TenantsDetailReadSingle
from layer8_auvik_api_client.models.user_tenants_read_multiple import UserTenantsReadMultiple

from layer8_auvik_api_client.api_client import ApiClient
from layer8_auvik_api_client.api_response import ApiResponse
from layer8_auvik_api_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TenantsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def read_multiple_tenants(self, **kwargs) -> UserTenantsReadMultiple:  # noqa: E501
        """Read Multiple Tenants  # noqa: E501

        Use the Read Multiple Tenants API to pull access detail about multiple multi-clients and clients associated with your Auvik user account.<br>         <br>         Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command:         <ul>     <li>Within the API URL, <b>us1.my</b> (https://auvikapi.us1.my.auvik.com) should be updated to match the region in which your account resides. To locate the region, log into your Auvik dashboard and look at the URL in your browser’s address bar.</li>           <li><i>user@example.com</i> should be the email address of a user with permissions to view tenant information.</li>           <li><i>apiKey</i> should be the API key that’s been set for the user.</li>           </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_multiple_tenants(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UserTenantsReadMultiple
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the read_multiple_tenants_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.read_multiple_tenants_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def read_multiple_tenants_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """Read Multiple Tenants  # noqa: E501

        Use the Read Multiple Tenants API to pull access detail about multiple multi-clients and clients associated with your Auvik user account.<br>         <br>         Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command:         <ul>     <li>Within the API URL, <b>us1.my</b> (https://auvikapi.us1.my.auvik.com) should be updated to match the region in which your account resides. To locate the region, log into your Auvik dashboard and look at the URL in your browser’s address bar.</li>           <li><i>user@example.com</i> should be the email address of a user with permissions to view tenant information.</li>           <li><i>apiKey</i> should be the API key that’s been set for the user.</li>           </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_multiple_tenants_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UserTenantsReadMultiple, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_multiple_tenants" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "UserTenantsReadMultiple",
            '400': "BasicError",
            '403': "BasicError",
            '404': "BasicError",
            '500': None,
        }

        return self.api_client.call_api(
            '/tenants', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def read_multiple_tenants_detail(self, tenant_domain_prefix : Annotated[StrictStr, Field(..., description="Domain prefix of your main Auvik account (tenant).")], filter_available_tenants : Annotated[Optional[StrictBool], Field(description="Filter whether or not a tenant is available, i.e. data can be gotten from them via the API.")] = None, **kwargs) -> TenantsDetailReadMultiple:  # noqa: E501
        """Read Multiple Tenants Detail  # noqa: E501

        Use the Read Multiple Tenants API to pull details for multiple multi-clients and clients associated with your main Auvik account.<br>         <br>         Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command:         <ul>     <li>Within the API URL, <b>us1.my</b> (https://auvikapi.us1.my.auvik.com) should be updated to match the region in which your account resides. To locate the region, log into your Auvik dashboard and look at the URL in your browser’s address bar.</li>           <li><i>user@example.com</i> should be the email address of a user with permissions to view tenant information.</li>           <li><i>apiKey</i> should be the API key that’s been set for the user.</li>           <li><i>mspdemo</i> should be the domain prefix of your main Auvik account. To locate your domain prefix, log into your Auvik dashboard and look at the URL in your browser’s address bar.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_multiple_tenants_detail(tenant_domain_prefix, filter_available_tenants, async_req=True)
        >>> result = thread.get()

        :param tenant_domain_prefix: Domain prefix of your main Auvik account (tenant). (required)
        :type tenant_domain_prefix: str
        :param filter_available_tenants: Filter whether or not a tenant is available, i.e. data can be gotten from them via the API.
        :type filter_available_tenants: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TenantsDetailReadMultiple
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the read_multiple_tenants_detail_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.read_multiple_tenants_detail_with_http_info(tenant_domain_prefix, filter_available_tenants, **kwargs)  # noqa: E501

    @validate_arguments
    def read_multiple_tenants_detail_with_http_info(self, tenant_domain_prefix : Annotated[StrictStr, Field(..., description="Domain prefix of your main Auvik account (tenant).")], filter_available_tenants : Annotated[Optional[StrictBool], Field(description="Filter whether or not a tenant is available, i.e. data can be gotten from them via the API.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Read Multiple Tenants Detail  # noqa: E501

        Use the Read Multiple Tenants API to pull details for multiple multi-clients and clients associated with your main Auvik account.<br>         <br>         Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command:         <ul>     <li>Within the API URL, <b>us1.my</b> (https://auvikapi.us1.my.auvik.com) should be updated to match the region in which your account resides. To locate the region, log into your Auvik dashboard and look at the URL in your browser’s address bar.</li>           <li><i>user@example.com</i> should be the email address of a user with permissions to view tenant information.</li>           <li><i>apiKey</i> should be the API key that’s been set for the user.</li>           <li><i>mspdemo</i> should be the domain prefix of your main Auvik account. To locate your domain prefix, log into your Auvik dashboard and look at the URL in your browser’s address bar.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_multiple_tenants_detail_with_http_info(tenant_domain_prefix, filter_available_tenants, async_req=True)
        >>> result = thread.get()

        :param tenant_domain_prefix: Domain prefix of your main Auvik account (tenant). (required)
        :type tenant_domain_prefix: str
        :param filter_available_tenants: Filter whether or not a tenant is available, i.e. data can be gotten from them via the API.
        :type filter_available_tenants: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TenantsDetailReadMultiple, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant_domain_prefix',
            'filter_available_tenants'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_multiple_tenants_detail" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('tenant_domain_prefix') is not None:  # noqa: E501
            _query_params.append(('tenantDomainPrefix', _params['tenant_domain_prefix']))

        if _params.get('filter_available_tenants') is not None:  # noqa: E501
            _query_params.append(('filter[availableTenants]', _params['filter_available_tenants']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "TenantsDetailReadMultiple",
            '400': "BasicError",
            '403': "BasicError",
            '404': "BasicError",
            '500': None,
        }

        return self.api_client.call_api(
            '/tenants/detail', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def read_single_tenants_detail(self, tenant_domain_prefix : Annotated[StrictStr, Field(..., description="Domain prefix of your main Auvik account (tenant).")], id : Annotated[StrictStr, Field(..., description="ID of tenant")], **kwargs) -> TenantsDetailReadSingle:  # noqa: E501
        """Read Single Tenant Detail  # noqa: E501

        Use the Read a Single Tenant API to pull detail about a specific multi-client and client associated with your main Auvik account. You’ll need the tenant ID for the specific multi-client or client you want detail for.<br>         <br>         You can find the tenant ID for the multi-client or client by <a href=\"#operation/readMultipleTenantsDetail\">Read Multiple Tenants Detail</a>.<br>         <br>         Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command:         <ul>     <li>Within the API URL, <b>us1.my</b> (https://auvikapi.us1.my.auvik.com) should be updated to match the region in which your account resides. To locate the region, log into your Auvik dashboard and look at the URL in your browser’s address bar.</li>           <li><i>user@example.com</i> should be the email address of a user with permissions to edit Client Management.</li>           <li><i>apiKey</i> should be the API key that’s been set for the user.</li>           <li><i>322018492519875477</i> should be the tenant ID.</li>           <li><i>mspdemo</i> should be the domain prefix of your main Auvik account. To locate your domain prefix, log into your Auvik dashboard and look at the URL in your browser’s address bar.</li>         </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_single_tenants_detail(tenant_domain_prefix, id, async_req=True)
        >>> result = thread.get()

        :param tenant_domain_prefix: Domain prefix of your main Auvik account (tenant). (required)
        :type tenant_domain_prefix: str
        :param id: ID of tenant (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TenantsDetailReadSingle
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the read_single_tenants_detail_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.read_single_tenants_detail_with_http_info(tenant_domain_prefix, id, **kwargs)  # noqa: E501

    @validate_arguments
    def read_single_tenants_detail_with_http_info(self, tenant_domain_prefix : Annotated[StrictStr, Field(..., description="Domain prefix of your main Auvik account (tenant).")], id : Annotated[StrictStr, Field(..., description="ID of tenant")], **kwargs) -> ApiResponse:  # noqa: E501
        """Read Single Tenant Detail  # noqa: E501

        Use the Read a Single Tenant API to pull detail about a specific multi-client and client associated with your main Auvik account. You’ll need the tenant ID for the specific multi-client or client you want detail for.<br>         <br>         You can find the tenant ID for the multi-client or client by <a href=\"#operation/readMultipleTenantsDetail\">Read Multiple Tenants Detail</a>.<br>         <br>         Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command:         <ul>     <li>Within the API URL, <b>us1.my</b> (https://auvikapi.us1.my.auvik.com) should be updated to match the region in which your account resides. To locate the region, log into your Auvik dashboard and look at the URL in your browser’s address bar.</li>           <li><i>user@example.com</i> should be the email address of a user with permissions to edit Client Management.</li>           <li><i>apiKey</i> should be the API key that’s been set for the user.</li>           <li><i>322018492519875477</i> should be the tenant ID.</li>           <li><i>mspdemo</i> should be the domain prefix of your main Auvik account. To locate your domain prefix, log into your Auvik dashboard and look at the URL in your browser’s address bar.</li>         </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_single_tenants_detail_with_http_info(tenant_domain_prefix, id, async_req=True)
        >>> result = thread.get()

        :param tenant_domain_prefix: Domain prefix of your main Auvik account (tenant). (required)
        :type tenant_domain_prefix: str
        :param id: ID of tenant (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TenantsDetailReadSingle, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant_domain_prefix',
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_single_tenants_detail" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('tenant_domain_prefix') is not None:  # noqa: E501
            _query_params.append(('tenantDomainPrefix', _params['tenant_domain_prefix']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "TenantsDetailReadSingle",
            '400': "BasicError",
            '403': "BasicError",
            '404': "BasicError",
            '500': None,
        }

        return self.api_client.call_api(
            '/tenants/detail/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
