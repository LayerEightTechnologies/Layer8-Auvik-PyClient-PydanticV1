# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, validator

class StackAllOfRelationshipsAllOfMembersInnerAttributes(BaseModel):
    """
    Details about this stack member  # noqa: E501
    """
    member_name: StrictStr = Field(..., alias="memberName", description="The member's name")
    make_model: StrictStr = Field(..., alias="makeModel", description="The member's make and model")
    member_number: StrictStr = Field(..., alias="memberNumber", description="The member's number in the stack")
    member_role: StrictStr = Field(..., alias="memberRole", description="The member's role")
    member_status: StrictStr = Field(..., alias="memberStatus", description="The member's status")
    mac_address: StrictStr = Field(..., alias="macAddress", description="The member's MAC address")
    software_priority: StrictStr = Field(..., alias="softwarePriority", description="Software priority of this stack.")
    hardware_priority: StrictStr = Field(..., alias="hardwarePriority", description="Hardware priority of this stack.")
    serial_number: StrictStr = Field(..., alias="serialNumber", description="The member's serial number")
    software_revision: StrictStr = Field(..., alias="softwareRevision", description="Software revision/version of this stack member")
    __properties = ["memberName", "makeModel", "memberNumber", "memberRole", "memberStatus", "macAddress", "softwarePriority", "hardwarePriority", "serialNumber", "softwareRevision"]

    @validator('member_role')
    def member_role_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('master', 'member', 'notMember', 'standby', 'backup', 'masterOrBackup'):
            raise ValueError("must be one of enum values ('master', 'member', 'notMember', 'standby', 'backup', 'masterOrBackup')")
        return value

    @validator('member_status')
    def member_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('waiting', 'progressing', 'added', 'ready', 'sdmMismatch', 'verMismatch', 'featureMismatch', 'newMasterInit', 'provisioned', 'invalid', 'removed'):
            raise ValueError("must be one of enum values ('waiting', 'progressing', 'added', 'ready', 'sdmMismatch', 'verMismatch', 'featureMismatch', 'newMasterInit', 'provisioned', 'invalid', 'removed')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StackAllOfRelationshipsAllOfMembersInnerAttributes:
        """Create an instance of StackAllOfRelationshipsAllOfMembersInnerAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StackAllOfRelationshipsAllOfMembersInnerAttributes:
        """Create an instance of StackAllOfRelationshipsAllOfMembersInnerAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StackAllOfRelationshipsAllOfMembersInnerAttributes.parse_obj(obj)

        _obj = StackAllOfRelationshipsAllOfMembersInnerAttributes.parse_obj({
            "member_name": obj.get("memberName"),
            "make_model": obj.get("makeModel"),
            "member_number": obj.get("memberNumber"),
            "member_role": obj.get("memberRole"),
            "member_status": obj.get("memberStatus"),
            "mac_address": obj.get("macAddress"),
            "software_priority": obj.get("softwarePriority"),
            "hardware_priority": obj.get("hardwarePriority"),
            "serial_number": obj.get("serialNumber"),
            "software_revision": obj.get("softwareRevision")
        })
        return _obj


