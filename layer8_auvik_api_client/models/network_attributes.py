# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, validator

class NetworkAttributes(BaseModel):
    """
    The type-specific properties of the networks object returned  # noqa: E501
    """
    network_type: StrictStr = Field(..., alias="networkType", description="This network's type")
    network_name: StrictStr = Field(..., alias="networkName", description="Name of this network, usually an IP/subnet or an SSID")
    description: StrictStr = Field(..., description="Description of this network, also often an IP/subnet or an SSID")
    scan_status: StrictStr = Field(..., alias="scanStatus", description="If this network is set to be scanned or not")
    last_modified: StrictStr = Field(..., alias="lastModified", description="When one of this network's attributes was last modified")
    __properties = ["networkType", "networkName", "description", "scanStatus", "lastModified"]

    @validator('network_type')
    def network_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('routed', 'vlan', 'wifi', 'loopback', 'network', 'layer2', 'internet'):
            raise ValueError("must be one of enum values ('routed', 'vlan', 'wifi', 'loopback', 'network', 'layer2', 'internet')")
        return value

    @validator('scan_status')
    def scan_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('true', 'false', 'notAllowed', 'unknown'):
            raise ValueError("must be one of enum values ('true', 'false', 'notAllowed', 'unknown')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NetworkAttributes:
        """Create an instance of NetworkAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NetworkAttributes:
        """Create an instance of NetworkAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NetworkAttributes.parse_obj(obj)

        _obj = NetworkAttributes.parse_obj({
            "network_type": obj.get("networkType"),
            "network_name": obj.get("networkName"),
            "description": obj.get("description"),
            "scan_status": obj.get("scanStatus"),
            "last_modified": obj.get("lastModified")
        })
        return _obj


