# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist, validator

class NetworkDetailsAttributes(BaseModel):
    """
    The type-specific properties of the networks object returned  # noqa: E501
    """
    scope: StrictStr = Field(..., description="Whether this network is a private or public network")
    primary_collector: StrictStr = Field(..., alias="primaryCollector", description="UUID of the primary Auvik collector assigned to this network")
    secondary_collectors: conlist(StrictStr) = Field(..., alias="secondaryCollectors", description="List of UUIDs of secondary Auvik collectors assigned to this network, if any")
    collector_selection: StrictStr = Field(..., alias="collectorSelection", description="How collectors for this network are selected")
    excluded_ip_addresses: conlist(StrictStr) = Field(..., alias="excludedIpAddresses", description="IP addresses and IP address ranges on this network that have been excluded from scans")
    __properties = ["scope", "primaryCollector", "secondaryCollectors", "collectorSelection", "excludedIpAddresses"]

    @validator('scope')
    def scope_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('private', 'public'):
            raise ValueError("must be one of enum values ('private', 'public')")
        return value

    @validator('collector_selection')
    def collector_selection_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('automatic', 'manual'):
            raise ValueError("must be one of enum values ('automatic', 'manual')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NetworkDetailsAttributes:
        """Create an instance of NetworkDetailsAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NetworkDetailsAttributes:
        """Create an instance of NetworkDetailsAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NetworkDetailsAttributes.parse_obj(obj)

        _obj = NetworkDetailsAttributes.parse_obj({
            "scope": obj.get("scope"),
            "primary_collector": obj.get("primaryCollector"),
            "secondary_collectors": obj.get("secondaryCollectors"),
            "collector_selection": obj.get("collectorSelection"),
            "excluded_ip_addresses": obj.get("excludedIpAddresses")
        })
        return _obj


