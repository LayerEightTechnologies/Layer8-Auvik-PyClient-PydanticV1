# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictFloat, StrictInt, StrictStr

from typing import Optional, Union

from layer8_auvik_api_client.models.component_statistics_read import ComponentStatisticsRead
from layer8_auvik_api_client.models.device_availability_statistics_read import DeviceAvailabilityStatisticsRead
from layer8_auvik_api_client.models.device_oid_monitor_read import DeviceOidMonitorRead
from layer8_auvik_api_client.models.device_statistics_read import DeviceStatisticsRead
from layer8_auvik_api_client.models.device_type_schema import DeviceTypeSchema
from layer8_auvik_api_client.models.interface_statistics_read import InterfaceStatisticsRead
from layer8_auvik_api_client.models.service_statistics_read import ServiceStatisticsRead

from layer8_auvik_api_client.api_client import ApiClient
from layer8_auvik_api_client.api_response import ApiResponse
from layer8_auvik_api_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class StatisticsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def read_component_statistics(self, component_type : Annotated[StrictStr, Field(..., description="Component type of statistic to return")], stat_id : Annotated[StrictStr, Field(..., description="ID of statistic to return")], filter_from_time : Annotated[StrictStr, Field(..., description="Timestamp from which you want to query")], filter_interval : Annotated[StrictStr, Field(..., description="Statistics reporting interval")], filter_thru_time : Annotated[Optional[StrictStr], Field(description="Timestamp to which you want to query (defaults to current time)")] = None, filter_component_id : Annotated[Optional[StrictStr], Field(description="Filter by component ID.")] = None, filter_parent_device : Annotated[Optional[StrictStr], Field(description="Filter by the entity's parent device ID.")] = None, tenants : Annotated[Optional[StrictStr], Field(description="Comma delimited list of tenant IDs to request info from.")] = None, page_first : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.")] = None, page_after : Annotated[Optional[StrictStr], Field(description="Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.")] = None, page_last : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.")] = None, **kwargs) -> ComponentStatisticsRead:  # noqa: E501
        """Read Component Statistics  # noqa: E501

        Use the Read Component Statistics API to fetch detailed statistics of a client's (and client's children if a multi-client) components for a given time range.<br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view component statistics information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>2020-03-10T01:00:00.000Z</i> should be the date from which you want to query.</li>     <li><i>2020-03-11T01:00:00.000Z</i> should be the date to which you want to query.</li>     <li><i>hour</i> should be the reporting interval for the statistics that are returned.</li> </ul>Each component type specified in the query path supports reporting statistics as indicated below: <table><tr><th>componentType</th><th>statId</th></tr><tr><td>cpu</td><td><ul><li>capacity</li><li>latency</li><li>readiness</li><li>ready</li><li>swap</li></ul></td></tr><tr><td>cpuCore</td><td><ul><li>idle</li><li>utilization</li></ul></td></tr><tr><td>disk</td><td><ul><li>latency</li><li>queueLatency</li><li>rate</li><li>totalLatency</li></ul></td></tr><tr><td>fan</td><td><ul><li>speed</li></ul></td></tr></tr><td>memory</td><td><ul><li>counters</li><li>swap</li><li>swapRate</li><li>temperature</li></ul></td></tr><tr><td>powerSupply</td><td><ul><li>power</li></ul></td></tr><tr><td>systemBoard</td><td><ul><li>temperature</li></ul></td></tr></table>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_component_statistics(component_type, stat_id, filter_from_time, filter_interval, filter_thru_time, filter_component_id, filter_parent_device, tenants, page_first, page_after, page_last, page_before, async_req=True)
        >>> result = thread.get()

        :param component_type: Component type of statistic to return (required)
        :type component_type: str
        :param stat_id: ID of statistic to return (required)
        :type stat_id: str
        :param filter_from_time: Timestamp from which you want to query (required)
        :type filter_from_time: str
        :param filter_interval: Statistics reporting interval (required)
        :type filter_interval: str
        :param filter_thru_time: Timestamp to which you want to query (defaults to current time)
        :type filter_thru_time: str
        :param filter_component_id: Filter by component ID.
        :type filter_component_id: str
        :param filter_parent_device: Filter by the entity's parent device ID.
        :type filter_parent_device: str
        :param tenants: Comma delimited list of tenant IDs to request info from.
        :type tenants: str
        :param page_first: For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.
        :type page_first: float
        :param page_after: Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.
        :type page_after: str
        :param page_last: For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.
        :type page_last: float
        :param page_before: Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.
        :type page_before: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ComponentStatisticsRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the read_component_statistics_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.read_component_statistics_with_http_info(component_type, stat_id, filter_from_time, filter_interval, filter_thru_time, filter_component_id, filter_parent_device, tenants, page_first, page_after, page_last, page_before, **kwargs)  # noqa: E501

    @validate_arguments
    def read_component_statistics_with_http_info(self, component_type : Annotated[StrictStr, Field(..., description="Component type of statistic to return")], stat_id : Annotated[StrictStr, Field(..., description="ID of statistic to return")], filter_from_time : Annotated[StrictStr, Field(..., description="Timestamp from which you want to query")], filter_interval : Annotated[StrictStr, Field(..., description="Statistics reporting interval")], filter_thru_time : Annotated[Optional[StrictStr], Field(description="Timestamp to which you want to query (defaults to current time)")] = None, filter_component_id : Annotated[Optional[StrictStr], Field(description="Filter by component ID.")] = None, filter_parent_device : Annotated[Optional[StrictStr], Field(description="Filter by the entity's parent device ID.")] = None, tenants : Annotated[Optional[StrictStr], Field(description="Comma delimited list of tenant IDs to request info from.")] = None, page_first : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.")] = None, page_after : Annotated[Optional[StrictStr], Field(description="Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.")] = None, page_last : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Read Component Statistics  # noqa: E501

        Use the Read Component Statistics API to fetch detailed statistics of a client's (and client's children if a multi-client) components for a given time range.<br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view component statistics information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>2020-03-10T01:00:00.000Z</i> should be the date from which you want to query.</li>     <li><i>2020-03-11T01:00:00.000Z</i> should be the date to which you want to query.</li>     <li><i>hour</i> should be the reporting interval for the statistics that are returned.</li> </ul>Each component type specified in the query path supports reporting statistics as indicated below: <table><tr><th>componentType</th><th>statId</th></tr><tr><td>cpu</td><td><ul><li>capacity</li><li>latency</li><li>readiness</li><li>ready</li><li>swap</li></ul></td></tr><tr><td>cpuCore</td><td><ul><li>idle</li><li>utilization</li></ul></td></tr><tr><td>disk</td><td><ul><li>latency</li><li>queueLatency</li><li>rate</li><li>totalLatency</li></ul></td></tr><tr><td>fan</td><td><ul><li>speed</li></ul></td></tr></tr><td>memory</td><td><ul><li>counters</li><li>swap</li><li>swapRate</li><li>temperature</li></ul></td></tr><tr><td>powerSupply</td><td><ul><li>power</li></ul></td></tr><tr><td>systemBoard</td><td><ul><li>temperature</li></ul></td></tr></table>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_component_statistics_with_http_info(component_type, stat_id, filter_from_time, filter_interval, filter_thru_time, filter_component_id, filter_parent_device, tenants, page_first, page_after, page_last, page_before, async_req=True)
        >>> result = thread.get()

        :param component_type: Component type of statistic to return (required)
        :type component_type: str
        :param stat_id: ID of statistic to return (required)
        :type stat_id: str
        :param filter_from_time: Timestamp from which you want to query (required)
        :type filter_from_time: str
        :param filter_interval: Statistics reporting interval (required)
        :type filter_interval: str
        :param filter_thru_time: Timestamp to which you want to query (defaults to current time)
        :type filter_thru_time: str
        :param filter_component_id: Filter by component ID.
        :type filter_component_id: str
        :param filter_parent_device: Filter by the entity's parent device ID.
        :type filter_parent_device: str
        :param tenants: Comma delimited list of tenant IDs to request info from.
        :type tenants: str
        :param page_first: For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.
        :type page_first: float
        :param page_after: Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.
        :type page_after: str
        :param page_last: For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.
        :type page_last: float
        :param page_before: Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.
        :type page_before: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ComponentStatisticsRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'component_type',
            'stat_id',
            'filter_from_time',
            'filter_interval',
            'filter_thru_time',
            'filter_component_id',
            'filter_parent_device',
            'tenants',
            'page_first',
            'page_after',
            'page_last',
            'page_before'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_component_statistics" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['component_type'] is not None:
            _path_params['componentType'] = _params['component_type']

        if _params['stat_id'] is not None:
            _path_params['statId'] = _params['stat_id']


        # process the query parameters
        _query_params = []
        if _params.get('filter_from_time') is not None:  # noqa: E501
            _query_params.append(('filter[fromTime]', _params['filter_from_time']))

        if _params.get('filter_thru_time') is not None:  # noqa: E501
            _query_params.append(('filter[thruTime]', _params['filter_thru_time']))

        if _params.get('filter_interval') is not None:  # noqa: E501
            _query_params.append(('filter[interval]', _params['filter_interval']))

        if _params.get('filter_component_id') is not None:  # noqa: E501
            _query_params.append(('filter[componentId]', _params['filter_component_id']))

        if _params.get('filter_parent_device') is not None:  # noqa: E501
            _query_params.append(('filter[parentDevice]', _params['filter_parent_device']))

        if _params.get('tenants') is not None:  # noqa: E501
            _query_params.append(('tenants', _params['tenants']))

        if _params.get('page_first') is not None:  # noqa: E501
            _query_params.append(('page[first]', _params['page_first']))

        if _params.get('page_after') is not None:  # noqa: E501
            _query_params.append(('page[after]', _params['page_after']))

        if _params.get('page_last') is not None:  # noqa: E501
            _query_params.append(('page[last]', _params['page_last']))

        if _params.get('page_before') is not None:  # noqa: E501
            _query_params.append(('page[before]', _params['page_before']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "ComponentStatisticsRead",
            '400': "BasicError",
            '403': "BasicError",
            '404': "BasicError",
            '500': None,
        }

        return self.api_client.call_api(
            '/stat/component/{componentType}/{statId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def read_device_availability_statistics(self, stat_id : Annotated[StrictStr, Field(..., description="ID of statistic to return")], filter_from_time : Annotated[StrictStr, Field(..., description="Timestamp from which you want to query")], filter_interval : Annotated[StrictStr, Field(..., description="Statistics reporting interval")], filter_thru_time : Annotated[Optional[StrictStr], Field(description="Timestamp to which you want to query (defaults to current time)")] = None, filter_device_type : Annotated[Optional[DeviceTypeSchema], Field(description="Filter by device type.")] = None, filter_device_id : Annotated[Optional[StrictStr], Field(description="Filter by device ID")] = None, tenants : Annotated[Optional[StrictStr], Field(description="Comma delimited list of tenant IDs to request info from.")] = None, page_first : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.")] = None, page_after : Annotated[Optional[StrictStr], Field(description="Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.")] = None, page_last : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.")] = None, **kwargs) -> DeviceAvailabilityStatisticsRead:  # noqa: E501
        """Read Device Availability Statistics  # noqa: E501

        Use the Read Device Availability Statistics API to fetch detailed availability statistics of a client’s (and client’s children if a multi-client) devices for a given time range.<br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view device availability statistics information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>2020-03-10T01:00:00.000Z</i> should be the date from which you want to query.</li>     <li><i>2020-03-11T01:00:00.000Z</i> should be the date to which you want to query.</li>     <li><i>hour</i> should be the reporting interval for the statistics that are returned.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_device_availability_statistics(stat_id, filter_from_time, filter_interval, filter_thru_time, filter_device_type, filter_device_id, tenants, page_first, page_after, page_last, page_before, async_req=True)
        >>> result = thread.get()

        :param stat_id: ID of statistic to return (required)
        :type stat_id: str
        :param filter_from_time: Timestamp from which you want to query (required)
        :type filter_from_time: str
        :param filter_interval: Statistics reporting interval (required)
        :type filter_interval: str
        :param filter_thru_time: Timestamp to which you want to query (defaults to current time)
        :type filter_thru_time: str
        :param filter_device_type: Filter by device type.
        :type filter_device_type: DeviceTypeSchema
        :param filter_device_id: Filter by device ID
        :type filter_device_id: str
        :param tenants: Comma delimited list of tenant IDs to request info from.
        :type tenants: str
        :param page_first: For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.
        :type page_first: float
        :param page_after: Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.
        :type page_after: str
        :param page_last: For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.
        :type page_last: float
        :param page_before: Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.
        :type page_before: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DeviceAvailabilityStatisticsRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the read_device_availability_statistics_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.read_device_availability_statistics_with_http_info(stat_id, filter_from_time, filter_interval, filter_thru_time, filter_device_type, filter_device_id, tenants, page_first, page_after, page_last, page_before, **kwargs)  # noqa: E501

    @validate_arguments
    def read_device_availability_statistics_with_http_info(self, stat_id : Annotated[StrictStr, Field(..., description="ID of statistic to return")], filter_from_time : Annotated[StrictStr, Field(..., description="Timestamp from which you want to query")], filter_interval : Annotated[StrictStr, Field(..., description="Statistics reporting interval")], filter_thru_time : Annotated[Optional[StrictStr], Field(description="Timestamp to which you want to query (defaults to current time)")] = None, filter_device_type : Annotated[Optional[DeviceTypeSchema], Field(description="Filter by device type.")] = None, filter_device_id : Annotated[Optional[StrictStr], Field(description="Filter by device ID")] = None, tenants : Annotated[Optional[StrictStr], Field(description="Comma delimited list of tenant IDs to request info from.")] = None, page_first : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.")] = None, page_after : Annotated[Optional[StrictStr], Field(description="Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.")] = None, page_last : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Read Device Availability Statistics  # noqa: E501

        Use the Read Device Availability Statistics API to fetch detailed availability statistics of a client’s (and client’s children if a multi-client) devices for a given time range.<br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view device availability statistics information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>2020-03-10T01:00:00.000Z</i> should be the date from which you want to query.</li>     <li><i>2020-03-11T01:00:00.000Z</i> should be the date to which you want to query.</li>     <li><i>hour</i> should be the reporting interval for the statistics that are returned.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_device_availability_statistics_with_http_info(stat_id, filter_from_time, filter_interval, filter_thru_time, filter_device_type, filter_device_id, tenants, page_first, page_after, page_last, page_before, async_req=True)
        >>> result = thread.get()

        :param stat_id: ID of statistic to return (required)
        :type stat_id: str
        :param filter_from_time: Timestamp from which you want to query (required)
        :type filter_from_time: str
        :param filter_interval: Statistics reporting interval (required)
        :type filter_interval: str
        :param filter_thru_time: Timestamp to which you want to query (defaults to current time)
        :type filter_thru_time: str
        :param filter_device_type: Filter by device type.
        :type filter_device_type: DeviceTypeSchema
        :param filter_device_id: Filter by device ID
        :type filter_device_id: str
        :param tenants: Comma delimited list of tenant IDs to request info from.
        :type tenants: str
        :param page_first: For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.
        :type page_first: float
        :param page_after: Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.
        :type page_after: str
        :param page_last: For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.
        :type page_last: float
        :param page_before: Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.
        :type page_before: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DeviceAvailabilityStatisticsRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'stat_id',
            'filter_from_time',
            'filter_interval',
            'filter_thru_time',
            'filter_device_type',
            'filter_device_id',
            'tenants',
            'page_first',
            'page_after',
            'page_last',
            'page_before'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_device_availability_statistics" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['stat_id'] is not None:
            _path_params['statId'] = _params['stat_id']


        # process the query parameters
        _query_params = []
        if _params.get('filter_from_time') is not None:  # noqa: E501
            _query_params.append(('filter[fromTime]', _params['filter_from_time']))

        if _params.get('filter_thru_time') is not None:  # noqa: E501
            _query_params.append(('filter[thruTime]', _params['filter_thru_time']))

        if _params.get('filter_interval') is not None:  # noqa: E501
            _query_params.append(('filter[interval]', _params['filter_interval']))

        if _params.get('filter_device_type') is not None:  # noqa: E501
            _query_params.append(('filter[deviceType]', _params['filter_device_type'].value))

        if _params.get('filter_device_id') is not None:  # noqa: E501
            _query_params.append(('filter[deviceId]', _params['filter_device_id']))

        if _params.get('tenants') is not None:  # noqa: E501
            _query_params.append(('tenants', _params['tenants']))

        if _params.get('page_first') is not None:  # noqa: E501
            _query_params.append(('page[first]', _params['page_first']))

        if _params.get('page_after') is not None:  # noqa: E501
            _query_params.append(('page[after]', _params['page_after']))

        if _params.get('page_last') is not None:  # noqa: E501
            _query_params.append(('page[last]', _params['page_last']))

        if _params.get('page_before') is not None:  # noqa: E501
            _query_params.append(('page[before]', _params['page_before']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "DeviceAvailabilityStatisticsRead",
            '400': "BasicError",
            '403': "BasicError",
            '404': "BasicError",
            '500': None,
        }

        return self.api_client.call_api(
            '/stat/deviceAvailability/{statId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def read_device_statistics(self, stat_id : Annotated[StrictStr, Field(..., description="ID of statistic to return")], filter_from_time : Annotated[StrictStr, Field(..., description="Timestamp from which you want to query")], filter_interval : Annotated[StrictStr, Field(..., description="Statistics reporting interval")], filter_thru_time : Annotated[Optional[StrictStr], Field(description="Timestamp to which you want to query (defaults to current time)")] = None, filter_device_type : Annotated[Optional[DeviceTypeSchema], Field(description="Filter by device type.")] = None, filter_device_id : Annotated[Optional[StrictStr], Field(description="Filter by device ID")] = None, tenants : Annotated[Optional[StrictStr], Field(description="Comma delimited list of tenant IDs to request info from.")] = None, page_first : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.")] = None, page_after : Annotated[Optional[StrictStr], Field(description="Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.")] = None, page_last : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.")] = None, **kwargs) -> DeviceStatisticsRead:  # noqa: E501
        """Read Device Statistics  # noqa: E501

        Use the Read Device Statistics API to fetch detailed statistics of a client’s (and client’s children if a multi-client) devices for a given time range.<br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view device statistics information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>2020-03-10T01:00:00.000Z</i> should be the date from which you want to query.</li>     <li><i>2020-03-11T01:00:00.000Z</i> should be the date to which you want to query.</li>     <li><i>hour</i> should be the reporting interval for the statistics that are returned.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_device_statistics(stat_id, filter_from_time, filter_interval, filter_thru_time, filter_device_type, filter_device_id, tenants, page_first, page_after, page_last, page_before, async_req=True)
        >>> result = thread.get()

        :param stat_id: ID of statistic to return (required)
        :type stat_id: str
        :param filter_from_time: Timestamp from which you want to query (required)
        :type filter_from_time: str
        :param filter_interval: Statistics reporting interval (required)
        :type filter_interval: str
        :param filter_thru_time: Timestamp to which you want to query (defaults to current time)
        :type filter_thru_time: str
        :param filter_device_type: Filter by device type.
        :type filter_device_type: DeviceTypeSchema
        :param filter_device_id: Filter by device ID
        :type filter_device_id: str
        :param tenants: Comma delimited list of tenant IDs to request info from.
        :type tenants: str
        :param page_first: For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.
        :type page_first: float
        :param page_after: Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.
        :type page_after: str
        :param page_last: For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.
        :type page_last: float
        :param page_before: Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.
        :type page_before: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DeviceStatisticsRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the read_device_statistics_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.read_device_statistics_with_http_info(stat_id, filter_from_time, filter_interval, filter_thru_time, filter_device_type, filter_device_id, tenants, page_first, page_after, page_last, page_before, **kwargs)  # noqa: E501

    @validate_arguments
    def read_device_statistics_with_http_info(self, stat_id : Annotated[StrictStr, Field(..., description="ID of statistic to return")], filter_from_time : Annotated[StrictStr, Field(..., description="Timestamp from which you want to query")], filter_interval : Annotated[StrictStr, Field(..., description="Statistics reporting interval")], filter_thru_time : Annotated[Optional[StrictStr], Field(description="Timestamp to which you want to query (defaults to current time)")] = None, filter_device_type : Annotated[Optional[DeviceTypeSchema], Field(description="Filter by device type.")] = None, filter_device_id : Annotated[Optional[StrictStr], Field(description="Filter by device ID")] = None, tenants : Annotated[Optional[StrictStr], Field(description="Comma delimited list of tenant IDs to request info from.")] = None, page_first : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.")] = None, page_after : Annotated[Optional[StrictStr], Field(description="Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.")] = None, page_last : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Read Device Statistics  # noqa: E501

        Use the Read Device Statistics API to fetch detailed statistics of a client’s (and client’s children if a multi-client) devices for a given time range.<br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view device statistics information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>2020-03-10T01:00:00.000Z</i> should be the date from which you want to query.</li>     <li><i>2020-03-11T01:00:00.000Z</i> should be the date to which you want to query.</li>     <li><i>hour</i> should be the reporting interval for the statistics that are returned.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_device_statistics_with_http_info(stat_id, filter_from_time, filter_interval, filter_thru_time, filter_device_type, filter_device_id, tenants, page_first, page_after, page_last, page_before, async_req=True)
        >>> result = thread.get()

        :param stat_id: ID of statistic to return (required)
        :type stat_id: str
        :param filter_from_time: Timestamp from which you want to query (required)
        :type filter_from_time: str
        :param filter_interval: Statistics reporting interval (required)
        :type filter_interval: str
        :param filter_thru_time: Timestamp to which you want to query (defaults to current time)
        :type filter_thru_time: str
        :param filter_device_type: Filter by device type.
        :type filter_device_type: DeviceTypeSchema
        :param filter_device_id: Filter by device ID
        :type filter_device_id: str
        :param tenants: Comma delimited list of tenant IDs to request info from.
        :type tenants: str
        :param page_first: For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.
        :type page_first: float
        :param page_after: Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.
        :type page_after: str
        :param page_last: For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.
        :type page_last: float
        :param page_before: Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.
        :type page_before: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DeviceStatisticsRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'stat_id',
            'filter_from_time',
            'filter_interval',
            'filter_thru_time',
            'filter_device_type',
            'filter_device_id',
            'tenants',
            'page_first',
            'page_after',
            'page_last',
            'page_before'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_device_statistics" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['stat_id'] is not None:
            _path_params['statId'] = _params['stat_id']


        # process the query parameters
        _query_params = []
        if _params.get('filter_from_time') is not None:  # noqa: E501
            _query_params.append(('filter[fromTime]', _params['filter_from_time']))

        if _params.get('filter_thru_time') is not None:  # noqa: E501
            _query_params.append(('filter[thruTime]', _params['filter_thru_time']))

        if _params.get('filter_interval') is not None:  # noqa: E501
            _query_params.append(('filter[interval]', _params['filter_interval']))

        if _params.get('filter_device_type') is not None:  # noqa: E501
            _query_params.append(('filter[deviceType]', _params['filter_device_type'].value))

        if _params.get('filter_device_id') is not None:  # noqa: E501
            _query_params.append(('filter[deviceId]', _params['filter_device_id']))

        if _params.get('tenants') is not None:  # noqa: E501
            _query_params.append(('tenants', _params['tenants']))

        if _params.get('page_first') is not None:  # noqa: E501
            _query_params.append(('page[first]', _params['page_first']))

        if _params.get('page_after') is not None:  # noqa: E501
            _query_params.append(('page[after]', _params['page_after']))

        if _params.get('page_last') is not None:  # noqa: E501
            _query_params.append(('page[last]', _params['page_last']))

        if _params.get('page_before') is not None:  # noqa: E501
            _query_params.append(('page[before]', _params['page_before']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "DeviceStatisticsRead",
            '400': "BasicError",
            '403': "BasicError",
            '404': "BasicError",
            '500': None,
        }

        return self.api_client.call_api(
            '/stat/device/{statId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def read_interface_statistics(self, stat_id : Annotated[StrictStr, Field(..., description="ID of statistic to return")], filter_from_time : Annotated[StrictStr, Field(..., description="Timestamp from which you want to query")], filter_interval : Annotated[StrictStr, Field(..., description="Statistics reporting interval")], filter_thru_time : Annotated[Optional[StrictStr], Field(description="Timestamp to which you want to query (defaults to current time)")] = None, filter_interface_type : Annotated[Optional[StrictStr], Field(description="Filter by interface type.")] = None, filter_interface_id : Annotated[Optional[StrictStr], Field(description="Filter by interface ID.")] = None, filter_parent_device : Annotated[Optional[StrictStr], Field(description="Filter by the entity's parent device ID.")] = None, tenants : Annotated[Optional[StrictStr], Field(description="Comma delimited list of tenant IDs to request info from.")] = None, page_first : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.")] = None, page_after : Annotated[Optional[StrictStr], Field(description="Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.")] = None, page_last : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.")] = None, **kwargs) -> InterfaceStatisticsRead:  # noqa: E501
        """Read Interface Statistics  # noqa: E501

        Use the Read Interface Statistics API to fetch detailed statistics of a client's (and client's children if a multi-client) interfaces for a given time range.<br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view interface statistics information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>2020-03-10T01:00:00.000Z</i> should be the date from which you want to query.</li>     <li><i>2020-03-11T01:00:00.000Z</i> should be the date to which you want to query.</li>     <li><i>hour</i> should be the reporting interval for the statistics that are returned.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_interface_statistics(stat_id, filter_from_time, filter_interval, filter_thru_time, filter_interface_type, filter_interface_id, filter_parent_device, tenants, page_first, page_after, page_last, page_before, async_req=True)
        >>> result = thread.get()

        :param stat_id: ID of statistic to return (required)
        :type stat_id: str
        :param filter_from_time: Timestamp from which you want to query (required)
        :type filter_from_time: str
        :param filter_interval: Statistics reporting interval (required)
        :type filter_interval: str
        :param filter_thru_time: Timestamp to which you want to query (defaults to current time)
        :type filter_thru_time: str
        :param filter_interface_type: Filter by interface type.
        :type filter_interface_type: str
        :param filter_interface_id: Filter by interface ID.
        :type filter_interface_id: str
        :param filter_parent_device: Filter by the entity's parent device ID.
        :type filter_parent_device: str
        :param tenants: Comma delimited list of tenant IDs to request info from.
        :type tenants: str
        :param page_first: For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.
        :type page_first: float
        :param page_after: Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.
        :type page_after: str
        :param page_last: For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.
        :type page_last: float
        :param page_before: Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.
        :type page_before: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InterfaceStatisticsRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the read_interface_statistics_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.read_interface_statistics_with_http_info(stat_id, filter_from_time, filter_interval, filter_thru_time, filter_interface_type, filter_interface_id, filter_parent_device, tenants, page_first, page_after, page_last, page_before, **kwargs)  # noqa: E501

    @validate_arguments
    def read_interface_statistics_with_http_info(self, stat_id : Annotated[StrictStr, Field(..., description="ID of statistic to return")], filter_from_time : Annotated[StrictStr, Field(..., description="Timestamp from which you want to query")], filter_interval : Annotated[StrictStr, Field(..., description="Statistics reporting interval")], filter_thru_time : Annotated[Optional[StrictStr], Field(description="Timestamp to which you want to query (defaults to current time)")] = None, filter_interface_type : Annotated[Optional[StrictStr], Field(description="Filter by interface type.")] = None, filter_interface_id : Annotated[Optional[StrictStr], Field(description="Filter by interface ID.")] = None, filter_parent_device : Annotated[Optional[StrictStr], Field(description="Filter by the entity's parent device ID.")] = None, tenants : Annotated[Optional[StrictStr], Field(description="Comma delimited list of tenant IDs to request info from.")] = None, page_first : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.")] = None, page_after : Annotated[Optional[StrictStr], Field(description="Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.")] = None, page_last : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Read Interface Statistics  # noqa: E501

        Use the Read Interface Statistics API to fetch detailed statistics of a client's (and client's children if a multi-client) interfaces for a given time range.<br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view interface statistics information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>2020-03-10T01:00:00.000Z</i> should be the date from which you want to query.</li>     <li><i>2020-03-11T01:00:00.000Z</i> should be the date to which you want to query.</li>     <li><i>hour</i> should be the reporting interval for the statistics that are returned.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_interface_statistics_with_http_info(stat_id, filter_from_time, filter_interval, filter_thru_time, filter_interface_type, filter_interface_id, filter_parent_device, tenants, page_first, page_after, page_last, page_before, async_req=True)
        >>> result = thread.get()

        :param stat_id: ID of statistic to return (required)
        :type stat_id: str
        :param filter_from_time: Timestamp from which you want to query (required)
        :type filter_from_time: str
        :param filter_interval: Statistics reporting interval (required)
        :type filter_interval: str
        :param filter_thru_time: Timestamp to which you want to query (defaults to current time)
        :type filter_thru_time: str
        :param filter_interface_type: Filter by interface type.
        :type filter_interface_type: str
        :param filter_interface_id: Filter by interface ID.
        :type filter_interface_id: str
        :param filter_parent_device: Filter by the entity's parent device ID.
        :type filter_parent_device: str
        :param tenants: Comma delimited list of tenant IDs to request info from.
        :type tenants: str
        :param page_first: For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.
        :type page_first: float
        :param page_after: Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.
        :type page_after: str
        :param page_last: For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.
        :type page_last: float
        :param page_before: Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.
        :type page_before: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InterfaceStatisticsRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'stat_id',
            'filter_from_time',
            'filter_interval',
            'filter_thru_time',
            'filter_interface_type',
            'filter_interface_id',
            'filter_parent_device',
            'tenants',
            'page_first',
            'page_after',
            'page_last',
            'page_before'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_interface_statistics" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['stat_id'] is not None:
            _path_params['statId'] = _params['stat_id']


        # process the query parameters
        _query_params = []
        if _params.get('filter_from_time') is not None:  # noqa: E501
            _query_params.append(('filter[fromTime]', _params['filter_from_time']))

        if _params.get('filter_thru_time') is not None:  # noqa: E501
            _query_params.append(('filter[thruTime]', _params['filter_thru_time']))

        if _params.get('filter_interval') is not None:  # noqa: E501
            _query_params.append(('filter[interval]', _params['filter_interval']))

        if _params.get('filter_interface_type') is not None:  # noqa: E501
            _query_params.append(('filter[interfaceType]', _params['filter_interface_type']))

        if _params.get('filter_interface_id') is not None:  # noqa: E501
            _query_params.append(('filter[interfaceId]', _params['filter_interface_id']))

        if _params.get('filter_parent_device') is not None:  # noqa: E501
            _query_params.append(('filter[parentDevice]', _params['filter_parent_device']))

        if _params.get('tenants') is not None:  # noqa: E501
            _query_params.append(('tenants', _params['tenants']))

        if _params.get('page_first') is not None:  # noqa: E501
            _query_params.append(('page[first]', _params['page_first']))

        if _params.get('page_after') is not None:  # noqa: E501
            _query_params.append(('page[after]', _params['page_after']))

        if _params.get('page_last') is not None:  # noqa: E501
            _query_params.append(('page[last]', _params['page_last']))

        if _params.get('page_before') is not None:  # noqa: E501
            _query_params.append(('page[before]', _params['page_before']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "InterfaceStatisticsRead",
            '400': "BasicError",
            '403': "BasicError",
            '404': "BasicError",
            '500': None,
        }

        return self.api_client.call_api(
            '/stat/interface/{statId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def read_oid_statistics(self, stat_id : Annotated[StrictStr, Field(..., description="ID of statistic to return")], filter_device_id : Annotated[Optional[StrictStr], Field(description="Filter by device ID")] = None, filter_device_type : Annotated[Optional[DeviceTypeSchema], Field(description="Filter by device type.")] = None, filter_oid : Annotated[Optional[StrictStr], Field(description="Filter by OID")] = None, tenants : Annotated[Optional[StrictStr], Field(description="Comma delimited list of tenant IDs to request info from.")] = None, page_first : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.")] = None, page_after : Annotated[Optional[StrictStr], Field(description="Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.")] = None, page_last : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.")] = None, **kwargs) -> DeviceOidMonitorRead:  # noqa: E501
        """Read OID Statistics  # noqa: E501

        Use the Read OID Statistics API to fetch the last recorded value of a monitored device OID.<br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view device statistics information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_oid_statistics(stat_id, filter_device_id, filter_device_type, filter_oid, tenants, page_first, page_after, page_last, page_before, async_req=True)
        >>> result = thread.get()

        :param stat_id: ID of statistic to return (required)
        :type stat_id: str
        :param filter_device_id: Filter by device ID
        :type filter_device_id: str
        :param filter_device_type: Filter by device type.
        :type filter_device_type: DeviceTypeSchema
        :param filter_oid: Filter by OID
        :type filter_oid: str
        :param tenants: Comma delimited list of tenant IDs to request info from.
        :type tenants: str
        :param page_first: For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.
        :type page_first: float
        :param page_after: Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.
        :type page_after: str
        :param page_last: For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.
        :type page_last: float
        :param page_before: Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.
        :type page_before: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DeviceOidMonitorRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the read_oid_statistics_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.read_oid_statistics_with_http_info(stat_id, filter_device_id, filter_device_type, filter_oid, tenants, page_first, page_after, page_last, page_before, **kwargs)  # noqa: E501

    @validate_arguments
    def read_oid_statistics_with_http_info(self, stat_id : Annotated[StrictStr, Field(..., description="ID of statistic to return")], filter_device_id : Annotated[Optional[StrictStr], Field(description="Filter by device ID")] = None, filter_device_type : Annotated[Optional[DeviceTypeSchema], Field(description="Filter by device type.")] = None, filter_oid : Annotated[Optional[StrictStr], Field(description="Filter by OID")] = None, tenants : Annotated[Optional[StrictStr], Field(description="Comma delimited list of tenant IDs to request info from.")] = None, page_first : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.")] = None, page_after : Annotated[Optional[StrictStr], Field(description="Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.")] = None, page_last : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Read OID Statistics  # noqa: E501

        Use the Read OID Statistics API to fetch the last recorded value of a monitored device OID.<br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view device statistics information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_oid_statistics_with_http_info(stat_id, filter_device_id, filter_device_type, filter_oid, tenants, page_first, page_after, page_last, page_before, async_req=True)
        >>> result = thread.get()

        :param stat_id: ID of statistic to return (required)
        :type stat_id: str
        :param filter_device_id: Filter by device ID
        :type filter_device_id: str
        :param filter_device_type: Filter by device type.
        :type filter_device_type: DeviceTypeSchema
        :param filter_oid: Filter by OID
        :type filter_oid: str
        :param tenants: Comma delimited list of tenant IDs to request info from.
        :type tenants: str
        :param page_first: For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.
        :type page_first: float
        :param page_after: Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.
        :type page_after: str
        :param page_last: For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.
        :type page_last: float
        :param page_before: Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.
        :type page_before: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DeviceOidMonitorRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'stat_id',
            'filter_device_id',
            'filter_device_type',
            'filter_oid',
            'tenants',
            'page_first',
            'page_after',
            'page_last',
            'page_before'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_oid_statistics" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['stat_id'] is not None:
            _path_params['statId'] = _params['stat_id']


        # process the query parameters
        _query_params = []
        if _params.get('filter_device_id') is not None:  # noqa: E501
            _query_params.append(('filter[deviceId]', _params['filter_device_id']))

        if _params.get('filter_device_type') is not None:  # noqa: E501
            _query_params.append(('filter[deviceType]', _params['filter_device_type'].value))

        if _params.get('filter_oid') is not None:  # noqa: E501
            _query_params.append(('filter[oid]', _params['filter_oid']))

        if _params.get('tenants') is not None:  # noqa: E501
            _query_params.append(('tenants', _params['tenants']))

        if _params.get('page_first') is not None:  # noqa: E501
            _query_params.append(('page[first]', _params['page_first']))

        if _params.get('page_after') is not None:  # noqa: E501
            _query_params.append(('page[after]', _params['page_after']))

        if _params.get('page_last') is not None:  # noqa: E501
            _query_params.append(('page[last]', _params['page_last']))

        if _params.get('page_before') is not None:  # noqa: E501
            _query_params.append(('page[before]', _params['page_before']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "DeviceOidMonitorRead",
            '400': "BasicError",
            '403': "BasicError",
            '404': "BasicError",
            '500': None,
        }

        return self.api_client.call_api(
            '/stat/oid/{statId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def read_service_statistics(self, stat_id : Annotated[StrictStr, Field(..., description="ID of statistic to return")], filter_from_time : Annotated[StrictStr, Field(..., description="Timestamp from which you want to query")], filter_interval : Annotated[StrictStr, Field(..., description="Statistics reporting interval")], filter_thru_time : Annotated[Optional[StrictStr], Field(description="Timestamp to which you want to query (defaults to current time)")] = None, filter_service_id : Annotated[Optional[StrictStr], Field(description="Filter by service ID")] = None, tenants : Annotated[Optional[StrictStr], Field(description="Comma delimited list of tenant IDs to request info from.")] = None, page_first : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.")] = None, page_after : Annotated[Optional[StrictStr], Field(description="Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.")] = None, page_last : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.")] = None, **kwargs) -> ServiceStatisticsRead:  # noqa: E501
        """Read Service Statistics  # noqa: E501

        Use the Read Service Statistics API to fetch detailed statistics of a client’s (and client’s children if a multi-client) services for a given time range.<br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view service statistics information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>2020-03-10T01:00:00.000Z</i> should be the date from which you want to query.</li>     <li><i>2020-03-11T01:00:00.000Z</i> should be the date to which you want to query.</li>     <li><i>hour</i> should be the reporting interval for the statistics that are returned.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_service_statistics(stat_id, filter_from_time, filter_interval, filter_thru_time, filter_service_id, tenants, page_first, page_after, page_last, page_before, async_req=True)
        >>> result = thread.get()

        :param stat_id: ID of statistic to return (required)
        :type stat_id: str
        :param filter_from_time: Timestamp from which you want to query (required)
        :type filter_from_time: str
        :param filter_interval: Statistics reporting interval (required)
        :type filter_interval: str
        :param filter_thru_time: Timestamp to which you want to query (defaults to current time)
        :type filter_thru_time: str
        :param filter_service_id: Filter by service ID
        :type filter_service_id: str
        :param tenants: Comma delimited list of tenant IDs to request info from.
        :type tenants: str
        :param page_first: For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.
        :type page_first: float
        :param page_after: Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.
        :type page_after: str
        :param page_last: For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.
        :type page_last: float
        :param page_before: Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.
        :type page_before: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ServiceStatisticsRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the read_service_statistics_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.read_service_statistics_with_http_info(stat_id, filter_from_time, filter_interval, filter_thru_time, filter_service_id, tenants, page_first, page_after, page_last, page_before, **kwargs)  # noqa: E501

    @validate_arguments
    def read_service_statistics_with_http_info(self, stat_id : Annotated[StrictStr, Field(..., description="ID of statistic to return")], filter_from_time : Annotated[StrictStr, Field(..., description="Timestamp from which you want to query")], filter_interval : Annotated[StrictStr, Field(..., description="Statistics reporting interval")], filter_thru_time : Annotated[Optional[StrictStr], Field(description="Timestamp to which you want to query (defaults to current time)")] = None, filter_service_id : Annotated[Optional[StrictStr], Field(description="Filter by service ID")] = None, tenants : Annotated[Optional[StrictStr], Field(description="Comma delimited list of tenant IDs to request info from.")] = None, page_first : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.")] = None, page_after : Annotated[Optional[StrictStr], Field(description="Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.")] = None, page_last : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.")] = None, page_before : Annotated[Optional[StrictStr], Field(description="Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Read Service Statistics  # noqa: E501

        Use the Read Service Statistics API to fetch detailed statistics of a client’s (and client’s children if a multi-client) services for a given time range.<br> Looking at the detail screen on the right, click cURL to see the command that will be used. Click <b>Copy</b> to copy the details of the command to your clipboard. Be sure to edit the following parameters within the command: <ul>     <li><i>user@example.com</i> should be the email address of a user with permissions to view service statistics information.</li>     <li><i>apiKey</i> should be the API key that’s been set for the user.</li>     <li><i>2020-03-10T01:00:00.000Z</i> should be the date from which you want to query.</li>     <li><i>2020-03-11T01:00:00.000Z</i> should be the date to which you want to query.</li>     <li><i>hour</i> should be the reporting interval for the statistics that are returned.</li> </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_service_statistics_with_http_info(stat_id, filter_from_time, filter_interval, filter_thru_time, filter_service_id, tenants, page_first, page_after, page_last, page_before, async_req=True)
        >>> result = thread.get()

        :param stat_id: ID of statistic to return (required)
        :type stat_id: str
        :param filter_from_time: Timestamp from which you want to query (required)
        :type filter_from_time: str
        :param filter_interval: Statistics reporting interval (required)
        :type filter_interval: str
        :param filter_thru_time: Timestamp to which you want to query (defaults to current time)
        :type filter_thru_time: str
        :param filter_service_id: Filter by service ID
        :type filter_service_id: str
        :param tenants: Comma delimited list of tenant IDs to request info from.
        :type tenants: str
        :param page_first: For paginated responses, the first N elements will be returned. Used in combination with <code>page[after]</code>.
        :type page_first: float
        :param page_after: Cursor after which elements will be returned as a page. The page size is provided by <code>page[first]</code>.
        :type page_after: str
        :param page_last: For paginated responses, the last N services will be returned. Used in combination with <code>page[before]</code>.
        :type page_last: float
        :param page_before: Cursor before which elements will be returned as a page. The page size is provided by <code>page[last]</code>.
        :type page_before: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ServiceStatisticsRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'stat_id',
            'filter_from_time',
            'filter_interval',
            'filter_thru_time',
            'filter_service_id',
            'tenants',
            'page_first',
            'page_after',
            'page_last',
            'page_before'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_service_statistics" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['stat_id'] is not None:
            _path_params['statId'] = _params['stat_id']


        # process the query parameters
        _query_params = []
        if _params.get('filter_from_time') is not None:  # noqa: E501
            _query_params.append(('filter[fromTime]', _params['filter_from_time']))

        if _params.get('filter_thru_time') is not None:  # noqa: E501
            _query_params.append(('filter[thruTime]', _params['filter_thru_time']))

        if _params.get('filter_interval') is not None:  # noqa: E501
            _query_params.append(('filter[interval]', _params['filter_interval']))

        if _params.get('filter_service_id') is not None:  # noqa: E501
            _query_params.append(('filter[serviceId]', _params['filter_service_id']))

        if _params.get('tenants') is not None:  # noqa: E501
            _query_params.append(('tenants', _params['tenants']))

        if _params.get('page_first') is not None:  # noqa: E501
            _query_params.append(('page[first]', _params['page_first']))

        if _params.get('page_after') is not None:  # noqa: E501
            _query_params.append(('page[after]', _params['page_after']))

        if _params.get('page_last') is not None:  # noqa: E501
            _query_params.append(('page[last]', _params['page_last']))

        if _params.get('page_before') is not None:  # noqa: E501
            _query_params.append(('page[before]', _params['page_before']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "ServiceStatisticsRead",
            '400': "BasicError",
            '403': "BasicError",
            '404': "BasicError",
            '500': None,
        }

        return self.api_client.call_api(
            '/stat/service/{statId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
