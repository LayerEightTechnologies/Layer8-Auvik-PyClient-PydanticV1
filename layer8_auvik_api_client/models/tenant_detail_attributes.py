# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator
from layer8_auvik_api_client.models.tenant_detail_attributes_address import TenantDetailAttributesAddress

class TenantDetailAttributes(BaseModel):
    """
    The type specific properties of the tenants object returned  # noqa: E501
    """
    domain_prefix: StrictStr = Field(..., alias="domainPrefix", description="The domain prefix of the tenant")
    display_name: Optional[StrictStr] = Field(None, alias="displayName", description="Display name used within Auvik")
    tenant_type: StrictStr = Field(..., alias="tenantType", description="The type of tenant in Auvik. A finite list of enumerated string values")
    enabled: StrictBool = Field(..., description="Whether or not the tenant is enabled")
    subscribed: StrictBool = Field(..., description="Whether or not the tenant is subscribed")
    subscription_owner: StrictStr = Field(..., alias="subscriptionOwner", description="The owner who subscribes the tenant")
    running: StrictBool = Field(..., description="Whether or not the tenant is running")
    trial_start_date: Optional[StrictStr] = Field(None, alias="trialStartDate", description="Start date of trial")
    trial_end_date: Optional[StrictStr] = Field(None, alias="trialEndDate", description="Start date of trial")
    address: Optional[TenantDetailAttributesAddress] = None
    __properties = ["domainPrefix", "displayName", "tenantType", "enabled", "subscribed", "subscriptionOwner", "running", "trialStartDate", "trialEndDate", "address"]

    @validator('tenant_type')
    def tenant_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('corporateIt', 'client', 'multiClient'):
            raise ValueError("must be one of enum values ('corporateIt', 'client', 'multiClient')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TenantDetailAttributes:
        """Create an instance of TenantDetailAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TenantDetailAttributes:
        """Create an instance of TenantDetailAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TenantDetailAttributes.parse_obj(obj)

        _obj = TenantDetailAttributes.parse_obj({
            "domain_prefix": obj.get("domainPrefix"),
            "display_name": obj.get("displayName"),
            "tenant_type": obj.get("tenantType"),
            "enabled": obj.get("enabled"),
            "subscribed": obj.get("subscribed"),
            "subscription_owner": obj.get("subscriptionOwner"),
            "running": obj.get("running"),
            "trial_start_date": obj.get("trialStartDate"),
            "trial_end_date": obj.get("trialEndDate"),
            "address": TenantDetailAttributesAddress.from_dict(obj.get("address")) if obj.get("address") is not None else None
        })
        return _obj


