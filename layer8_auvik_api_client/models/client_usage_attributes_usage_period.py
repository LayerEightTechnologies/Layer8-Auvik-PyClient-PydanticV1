# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class ClientUsageAttributesUsagePeriod(BaseModel):
    """
    Description of the usage period that's been asked for  # noqa: E501
    """
    start_date: Optional[StrictStr] = Field(None, alias="startDate", description="Date and time the usage period starts")
    end_date: Optional[StrictStr] = Field(None, alias="endDate", description="Date and time the usage period ends")
    length_in_days: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="lengthInDays", description="Number of days in the usage period")
    __properties = ["startDate", "endDate", "lengthInDays"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClientUsageAttributesUsagePeriod:
        """Create an instance of ClientUsageAttributesUsagePeriod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClientUsageAttributesUsagePeriod:
        """Create an instance of ClientUsageAttributesUsagePeriod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClientUsageAttributesUsagePeriod.parse_obj(obj)

        _obj = ClientUsageAttributesUsagePeriod.parse_obj({
            "start_date": obj.get("startDate"),
            "end_date": obj.get("endDate"),
            "length_in_days": obj.get("lengthInDays")
        })
        return _obj


