# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from layer8_auvik_api_client.models.device_info_read_multiple import DeviceInfoReadMultiple  # noqa: E501

class TestDeviceInfoReadMultiple(unittest.TestCase):
    """DeviceInfoReadMultiple unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeviceInfoReadMultiple:
        """Test DeviceInfoReadMultiple
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeviceInfoReadMultiple`
        """
        model = DeviceInfoReadMultiple()  # noqa: E501
        if include_optional:
            return DeviceInfoReadMultiple(
                data = [
                    layer8_auvik_api_client.models.devices_resource_object.devicesResourceObject(
                        type = 'device', 
                        id = 'MTk5NTAyNzg2ODc3MDYzNDI1LDE5OTUwMjc5MTExMzAyODg2Nw', 
                        attributes = layer8_auvik_api_client.models.device_attributes.deviceAttributes(
                            ip_addresses = ["10.0.0.1"], 
                            device_name = 'MyAccessPoint', 
                            device_type = 'accessPoint', 
                            make_model = 'M Series Access Point', 
                            vendor_name = 'Ubiquiti', 
                            software_version = '3.9.3.7537', 
                            serial_number = '1Q2W3E4R5T6Y', 
                            description = 'Linux 3.3.8 #1 Fri Oct 13 11:12:44 PDT 2017 mips', 
                            firmware_version = 'unifi-v1.6.7.249-gb74e0282', 
                            last_modified = '2018-03-12T12:00:00.000Z', 
                            last_seen_time = '2018-11-30T18:34:39.452Z', 
                            online_status = 'online', ), 
                        relationships = layer8_auvik_api_client.models.device_relationships.deviceRelationships(
                            tenant = layer8_auvik_api_client.models.tenant.tenant(
                                data = layer8_auvik_api_client.models.tenant_data.tenant_data(
                                    type = 'tenant', 
                                    id = '195798545063742726', ), ), 
                            networks = layer8_auvik_api_client.models.device_relationships_networks.deviceRelationships_networks(), 
                            device_detail = layer8_auvik_api_client.models.device_relationships_device_detail.deviceRelationships_deviceDetail(), ), 
                        links = layer8_auvik_api_client.models.devices_resource_object_links.devicesResourceObject_links(
                            dashboard = 'https://sampledomain.my.auvik.com/#entity/device/199502791112896003/dashboard', 
                            self = 'https://auvikapi.us1.my.auvik.com/v1/inventory/device/info/MTk5NTAyNzg2ODc3MDYzNDI1LDE5OTUwMjc5MTExMzAyODg2Nw', ), )
                    ],
                included = [
                    layer8_auvik_api_client.models.device_details_resource_object.deviceDetailsResourceObject(
                        type = 'deviceDetail', 
                        id = 'MTk5NTAyNzg2ODc3MDYzNDI1LDE5OTUwMjc5MTExMzAyODg2Nw', 
                        attributes = layer8_auvik_api_client.models.device_details_attributes.deviceDetailsAttributes(
                            discovery_status = layer8_auvik_api_client.models.device_details_attributes_discovery_status.deviceDetailsAttributes_discoveryStatus(
                                snmp = 'disabled', 
                                login = 'disabled', 
                                wmi = 'disabled', 
                                vmware = 'disabled', ), 
                            manage_status = True, 
                            traffic_insights_status = 'notDetected', ), 
                        relationships = layer8_auvik_api_client.models.device_details_relationships.deviceDetailsRelationships(
                            tenant = layer8_auvik_api_client.models.tenant.tenant(
                                data = layer8_auvik_api_client.models.tenant_data.tenant_data(
                                    type = 'tenant', 
                                    id = '195798545063742726', ), ), 
                            connected_devices = layer8_auvik_api_client.models.device_details_relationships_connected_devices.deviceDetailsRelationships_connectedDevices(
                                data = [
                                    layer8_auvik_api_client.models.device_details_relationships_connected_devices_data.deviceDetailsRelationships_connectedDevices_data(
                                        id = 'MTk5NzYyMjM1MDE1MTY4MDA0LDE5OTc2MjQ4MzgzMjYxMjM1NQ', 
                                        type = 'device', 
                                        links = layer8_auvik_api_client.models.device_details_relationships_connected_devices_links.deviceDetailsRelationships_connectedDevices_links(
                                            dashboard = 'https://sampledomain.my.auvik.com/#entity/device/199502791112785923/dashboard', 
                                            self = 'https://auvikapi.us1.my.auvik.com/v1/inventory/device/info/MTk5NTAyNzg2ODc3MDYzNDI1LDE5OTUwMjc5MTExMjg5NjAwMw', ), )
                                    ], ), 
                            interfaces = layer8_auvik_api_client.models.device_details_relationships_interfaces.deviceDetailsRelationships_interfaces(), 
                            configurations = layer8_auvik_api_client.models.device_details_relationships_configurations.deviceDetailsRelationships_configurations(
                                data = [
                                    layer8_auvik_api_client.models.device_details_relationships_configurations_data.deviceDetailsRelationships_configurations_data(
                                        type = 'configuration', 
                                        id = 'MTk5NTAyNzg2ODc3MDYzNDI1LDE5OTUwMjc5MTExMjg5NjAwMw', )
                                    ], ), 
                            components = layer8_auvik_api_client.models.device_details_relationships_components.deviceDetailsRelationships_components(
                                data = [
                                    layer8_auvik_api_client.models.device_details_relationships_components_data.deviceDetailsRelationships_components_data(
                                        type = 'component', 
                                        id = 'MTk5NTAyNzg2ODc3MDYzNDI1LDE5OTUwMjc5MTExMjg5NjAwMw', )
                                    ], ), ), 
                        links = layer8_auvik_api_client.models.device_details_resource_object_links.deviceDetailsResourceObject_links(
                            dashboard = 'https://sampledomain.my.auvik.com/#entity/device/199502791113028867/dashboard', 
                            self = 'https://auvikapi.us1.my.auvik.com/v1/inventory/device/detail/MTk5NTAyNzg2ODc3MDYzNDI1LDE5OTUwMjc5MTExMzAyODg2Nw', ), )
                    ],
                links = layer8_auvik_api_client.models.device_info_read_multiple_links.deviceInfoReadMultiple_links(
                    next = 'https://auvikapi.us1.my.auvik.com/v1/inventory/device/info?page[after]=Y3Vyc29yOk16TXpPVE0wT0RRNU1UQTROemN4TlRneExETXpNemt6TkRnME56QXpORFF5TmpFeU5R&page[first]=300', 
                    prev = 'https://auvikapi.us1.my.auvik.com/v1/inventory/device/info?page[before]=Y3Vyc29yOk16TXpPVE0wT0RRNU1UQTROemN4TlRneExETXpNemt6TkRnME56QXpORFF5TmpFeU5R&page[last]=300', 
                    first = 'https://auvikapi.us1.my.auvik.com/v1/inventory/device/info?page[first]=300', 
                    last = 'https://auvikapi.us1.my.auvik.com/v1/inventory/device/info?page[last]=300', ),
                meta = layer8_auvik_api_client.models.meta_object.meta object(
                    total_pages = 5, )
            )
        else:
            return DeviceInfoReadMultiple(
        )
        """

    def testDeviceInfoReadMultiple(self):
        """Test DeviceInfoReadMultiple"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
