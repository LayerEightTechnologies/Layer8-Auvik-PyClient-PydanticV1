# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, validator

class DeviceLifecycleAttributes(BaseModel):
    """
    The type-specific properties of the devices object returned  # noqa: E501
    """
    device_name: StrictStr = Field(..., alias="deviceName", description="Device's name")
    sales_availability: StrictStr = Field(..., alias="salesAvailability", description="Availability to order the requested product through Cisco point-of-sale mechanisms")
    software_maintenance_status: StrictStr = Field(..., alias="softwareMaintenanceStatus", description="Availability of any software maintenance releases or bug fixes to the software product released by Cisco Engineering")
    security_software_maintenance_status: StrictStr = Field(..., alias="securitySoftwareMaintenanceStatus", description="Availability of any planned maintenance release or scheduled software remedy for a security vulnerability issued by Cisco Engineering")
    last_support_status: StrictStr = Field(..., alias="lastSupportStatus", description="Availability of service and support for the product")
    __properties = ["deviceName", "salesAvailability", "softwareMaintenanceStatus", "securitySoftwareMaintenanceStatus", "lastSupportStatus"]

    @validator('sales_availability')
    def sales_availability_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('covered', 'available', 'expired', 'securityOnly', 'unpublished', 'empty'):
            raise ValueError("must be one of enum values ('covered', 'available', 'expired', 'securityOnly', 'unpublished', 'empty')")
        return value

    @validator('software_maintenance_status')
    def software_maintenance_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('covered', 'available', 'expired', 'securityOnly', 'unpublished', 'empty'):
            raise ValueError("must be one of enum values ('covered', 'available', 'expired', 'securityOnly', 'unpublished', 'empty')")
        return value

    @validator('security_software_maintenance_status')
    def security_software_maintenance_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('covered', 'available', 'expired', 'securityOnly', 'unpublished', 'empty'):
            raise ValueError("must be one of enum values ('covered', 'available', 'expired', 'securityOnly', 'unpublished', 'empty')")
        return value

    @validator('last_support_status')
    def last_support_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('covered', 'available', 'expired', 'securityOnly', 'unpublished', 'empty'):
            raise ValueError("must be one of enum values ('covered', 'available', 'expired', 'securityOnly', 'unpublished', 'empty')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeviceLifecycleAttributes:
        """Create an instance of DeviceLifecycleAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeviceLifecycleAttributes:
        """Create an instance of DeviceLifecycleAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DeviceLifecycleAttributes.parse_obj(obj)

        _obj = DeviceLifecycleAttributes.parse_obj({
            "device_name": obj.get("deviceName"),
            "sales_availability": obj.get("salesAvailability"),
            "software_maintenance_status": obj.get("softwareMaintenanceStatus"),
            "security_software_maintenance_status": obj.get("securitySoftwareMaintenanceStatus"),
            "last_support_status": obj.get("lastSupportStatus")
        })
        return _obj


