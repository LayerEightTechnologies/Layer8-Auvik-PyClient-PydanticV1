# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from layer8_auvik_api_client.models.hypervisor_all_of_attributes_all_of_virtual_machines_inner_snapshots_inner import HypervisorAllOfAttributesAllOfVirtualMachinesInnerSnapshotsInner

class HypervisorAllOfAttributesAllOfVirtualMachinesInner(BaseModel):
    """
    HypervisorAllOfAttributesAllOfVirtualMachinesInner
    """
    device_type: StrictStr = Field(..., alias="deviceType", description="What type of device it is")
    power_status: StrictStr = Field(..., alias="powerStatus", description="The VM power status")
    v_cpu: StrictStr = Field(..., alias="vCPU", description="Number of virtual CPUs")
    v_disk: StrictStr = Field(..., alias="vDisk", description="Number of virtual disks")
    allocated_memory: StrictStr = Field(..., alias="allocatedMemory", description="How much memory is allocated to this VM, in Bytes")
    snapshots: conlist(HypervisorAllOfAttributesAllOfVirtualMachinesInnerSnapshotsInner) = Field(..., description="List of image snapshots for this VM")
    __properties = ["deviceType", "powerStatus", "vCPU", "vDisk", "allocatedMemory", "snapshots"]

    @validator('device_type')
    def device_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('virtualMachine'):
            raise ValueError("must be one of enum values ('virtualMachine')")
        return value

    @validator('power_status')
    def power_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('online', 'offline', 'unreachable', 'testing', 'unknown', 'dormant', 'notPresent', 'lowerLayerDown'):
            raise ValueError("must be one of enum values ('online', 'offline', 'unreachable', 'testing', 'unknown', 'dormant', 'notPresent', 'lowerLayerDown')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HypervisorAllOfAttributesAllOfVirtualMachinesInner:
        """Create an instance of HypervisorAllOfAttributesAllOfVirtualMachinesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in snapshots (list)
        _items = []
        if self.snapshots:
            for _item in self.snapshots:
                if _item:
                    _items.append(_item.to_dict())
            _dict['snapshots'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HypervisorAllOfAttributesAllOfVirtualMachinesInner:
        """Create an instance of HypervisorAllOfAttributesAllOfVirtualMachinesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HypervisorAllOfAttributesAllOfVirtualMachinesInner.parse_obj(obj)

        _obj = HypervisorAllOfAttributesAllOfVirtualMachinesInner.parse_obj({
            "device_type": obj.get("deviceType"),
            "power_status": obj.get("powerStatus"),
            "v_cpu": obj.get("vCPU"),
            "v_disk": obj.get("vDisk"),
            "allocated_memory": obj.get("allocatedMemory"),
            "snapshots": [HypervisorAllOfAttributesAllOfVirtualMachinesInnerSnapshotsInner.from_dict(_item) for _item in obj.get("snapshots")] if obj.get("snapshots") is not None else None
        })
        return _obj


