# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from layer8_auvik_api_client.models.client_usage_attributes_client_usage import ClientUsageAttributesClientUsage
from layer8_auvik_api_client.models.client_usage_attributes_device_usage import ClientUsageAttributesDeviceUsage
from layer8_auvik_api_client.models.client_usage_attributes_usage_period import ClientUsageAttributesUsagePeriod

class ClientUsageAttributes(BaseModel):
    """
    The type-specific properties of the client usage object returned  # noqa: E501
    """
    domain_prefix: Optional[StrictStr] = Field(None, alias="domainPrefix", description="Client tenant's domain prefix/name")
    billable_days: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="billableDays", description="Days this client (and its children) was billable for across the usage period.")
    usage_period: Optional[ClientUsageAttributesUsagePeriod] = Field(None, alias="usagePeriod")
    device_usage: Optional[ClientUsageAttributesDeviceUsage] = Field(None, alias="deviceUsage")
    client_usage: Optional[ClientUsageAttributesClientUsage] = Field(None, alias="clientUsage")
    __properties = ["domainPrefix", "billableDays", "usagePeriod", "deviceUsage", "clientUsage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClientUsageAttributes:
        """Create an instance of ClientUsageAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of usage_period
        if self.usage_period:
            _dict['usagePeriod'] = self.usage_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device_usage
        if self.device_usage:
            _dict['deviceUsage'] = self.device_usage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of client_usage
        if self.client_usage:
            _dict['clientUsage'] = self.client_usage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClientUsageAttributes:
        """Create an instance of ClientUsageAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClientUsageAttributes.parse_obj(obj)

        _obj = ClientUsageAttributes.parse_obj({
            "domain_prefix": obj.get("domainPrefix"),
            "billable_days": obj.get("billableDays"),
            "usage_period": ClientUsageAttributesUsagePeriod.from_dict(obj.get("usagePeriod")) if obj.get("usagePeriod") is not None else None,
            "device_usage": ClientUsageAttributesDeviceUsage.from_dict(obj.get("deviceUsage")) if obj.get("deviceUsage") is not None else None,
            "client_usage": ClientUsageAttributesClientUsage.from_dict(obj.get("clientUsage")) if obj.get("clientUsage") is not None else None
        })
        return _obj


