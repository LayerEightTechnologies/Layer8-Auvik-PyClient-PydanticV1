# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from layer8_auvik_api_client.models.client_usage_attributes_usage_period import ClientUsageAttributesUsagePeriod
from layer8_auvik_api_client.models.device_usage_attributes_average_days_by_client_type import DeviceUsageAttributesAverageDaysByClientType
from layer8_auvik_api_client.models.device_usage_attributes_total_days_by_client_type import DeviceUsageAttributesTotalDaysByClientType

class DeviceUsageAttributes(BaseModel):
    """
    The type-specific properties of the client usage object returned  # noqa: E501
    """
    device_name: Optional[StrictStr] = Field(None, alias="deviceName", description="Device's name")
    usage_period: Optional[ClientUsageAttributesUsagePeriod] = Field(None, alias="usagePeriod")
    total_days: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalDays", description="The total billable device days across the usage period")
    average_days: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="averageDays", description="The average billable device days across the usage period")
    total_days_by_client_type: Optional[DeviceUsageAttributesTotalDaysByClientType] = Field(None, alias="totalDaysByClientType")
    average_days_by_client_type: Optional[DeviceUsageAttributesAverageDaysByClientType] = Field(None, alias="averageDaysByClientType")
    __properties = ["deviceName", "usagePeriod", "totalDays", "averageDays", "totalDaysByClientType", "averageDaysByClientType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeviceUsageAttributes:
        """Create an instance of DeviceUsageAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of usage_period
        if self.usage_period:
            _dict['usagePeriod'] = self.usage_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_days_by_client_type
        if self.total_days_by_client_type:
            _dict['totalDaysByClientType'] = self.total_days_by_client_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of average_days_by_client_type
        if self.average_days_by_client_type:
            _dict['averageDaysByClientType'] = self.average_days_by_client_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeviceUsageAttributes:
        """Create an instance of DeviceUsageAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DeviceUsageAttributes.parse_obj(obj)

        _obj = DeviceUsageAttributes.parse_obj({
            "device_name": obj.get("deviceName"),
            "usage_period": ClientUsageAttributesUsagePeriod.from_dict(obj.get("usagePeriod")) if obj.get("usagePeriod") is not None else None,
            "total_days": obj.get("totalDays"),
            "average_days": obj.get("averageDays"),
            "total_days_by_client_type": DeviceUsageAttributesTotalDaysByClientType.from_dict(obj.get("totalDaysByClientType")) if obj.get("totalDaysByClientType") is not None else None,
            "average_days_by_client_type": DeviceUsageAttributesAverageDaysByClientType.from_dict(obj.get("averageDaysByClientType")) if obj.get("averageDaysByClientType") is not None else None
        })
        return _obj


