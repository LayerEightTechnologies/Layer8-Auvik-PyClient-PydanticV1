# coding: utf-8

"""
    Auvik API

    To use the Auvik APIs, you’ll need a <a href=\"https://support.auvik.com/hc/en-us/articles/204309114-#topic_generate\" target=\"_blank\">valid Auvik user and the user’s API key</a>. The user must also have the correct <a href=\" https://support.auvik.com/hc/en-us/articles/115002815966\" target=\"_blank\">role permissions</a>.<br>     <br>     Note: The word <i>tenant</i> as it appears in the API descriptions means one of Auvik’s supported tenant types: multi-client or client.<br><br>All date formats are formatted in the format of YYYY-MM-DDTHH:MM:SS.sssZ, as describe in ISO 8061<br><br>To find out more about Auvik’s APIs, <a href=\"https://support.auvik.com/hc/en-us/articles/360017965092\" target=\"_blank\">click here.</a>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from layer8_auvik_api_client.models.access_point import AccessPoint
from layer8_auvik_api_client.models.controller import Controller
from layer8_auvik_api_client.models.hypervisor import Hypervisor
from layer8_auvik_api_client.models.misc_device import MiscDevice
from layer8_auvik_api_client.models.stack import Stack
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

DEVICEEXTENDEDDETAILRESOURCEOBJECT_ONE_OF_SCHEMAS = ["AccessPoint", "Controller", "Hypervisor", "MiscDevice", "Stack"]

class DeviceExtendedDetailResourceObject(BaseModel):
    """
    DeviceExtendedDetailResourceObject
    """
    # data type: Stack
    oneof_schema_1_validator: Optional[Stack] = None
    # data type: Hypervisor
    oneof_schema_2_validator: Optional[Hypervisor] = None
    # data type: Controller
    oneof_schema_3_validator: Optional[Controller] = None
    # data type: AccessPoint
    oneof_schema_4_validator: Optional[AccessPoint] = None
    # data type: MiscDevice
    oneof_schema_5_validator: Optional[MiscDevice] = None
    if TYPE_CHECKING:
        actual_instance: Union[AccessPoint, Controller, Hypervisor, MiscDevice, Stack]
    else:
        actual_instance: Any
    one_of_schemas: List[str] = Field(DEVICEEXTENDEDDETAILRESOURCEOBJECT_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = DeviceExtendedDetailResourceObject.construct()
        error_messages = []
        match = 0
        # validate data type: Stack
        if not isinstance(v, Stack):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Stack`")
        else:
            match += 1
        # validate data type: Hypervisor
        if not isinstance(v, Hypervisor):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Hypervisor`")
        else:
            match += 1
        # validate data type: Controller
        if not isinstance(v, Controller):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Controller`")
        else:
            match += 1
        # validate data type: AccessPoint
        if not isinstance(v, AccessPoint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AccessPoint`")
        else:
            match += 1
        # validate data type: MiscDevice
        if not isinstance(v, MiscDevice):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MiscDevice`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in DeviceExtendedDetailResourceObject with oneOf schemas: AccessPoint, Controller, Hypervisor, MiscDevice, Stack. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in DeviceExtendedDetailResourceObject with oneOf schemas: AccessPoint, Controller, Hypervisor, MiscDevice, Stack. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> DeviceExtendedDetailResourceObject:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> DeviceExtendedDetailResourceObject:
        """Returns the object represented by the json string"""
        instance = DeviceExtendedDetailResourceObject.construct()
        error_messages = []
        match = 0

        # deserialize data into Stack
        try:
            instance.actual_instance = Stack.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Hypervisor
        try:
            instance.actual_instance = Hypervisor.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Controller
        try:
            instance.actual_instance = Controller.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AccessPoint
        try:
            instance.actual_instance = AccessPoint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MiscDevice
        try:
            instance.actual_instance = MiscDevice.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into DeviceExtendedDetailResourceObject with oneOf schemas: AccessPoint, Controller, Hypervisor, MiscDevice, Stack. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into DeviceExtendedDetailResourceObject with oneOf schemas: AccessPoint, Controller, Hypervisor, MiscDevice, Stack. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())


